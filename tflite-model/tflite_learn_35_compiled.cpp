/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.08.2023 19:22:21

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70128;
#else
constexpr int kTensorArenaSize = 69104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00316801224835217, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 13155, -26996, -23227, -24182, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00029111784533597529, 0.00017245154595002532, 0.00020256321295164526, 0.00019230566977057606, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 81,-52,-31,-54,57,-33,-22,-44,100,-3,27,24,-14,-23,46,-37,-3,-34,-76,3,-19,127,35,62,-6,28,-21,-18,64,-17,-24,9, 
  /* [1][0][][] */ -28,89,-59,3,-23,53,127,58,-47,-96,-83,53,90,-42,-23,-104,126,-127,32,-34,24,-116,-109,-8,1,-104,69,-46,-69,-81,-58,-27, 
  /* [2][0][][] */ -127,89,30,62,-13,-8,70,27,-59,-121,93,-44,-59,80,-103,76,38,70,57,-41,2,-17,-39,-12,23,-32,59,-121,-45,19,24,62, 
  /* [3][0][][] */ -49,-62,79,21,2,101,33,1,-45,-111,34,99,69,0,-90,-10,97,-83,99,9,-89,-7,-127,-12,92,-58,-105,91,-115,97,51,25, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0059874337166547775, 0.0035468186251819134, 0.0041661267168819904, 0.0039551593363285065, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 2588, 452, -785, -201, -1224, 542, 564, 410, -135, 2250, 373, 809, -614, -320, -75, -345, 698, 129, 429, -936, -732, 2173, 932, -565, 446, 758, 482, 817, 2139, -1058, 540, -40, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 0.00010726750042522326, 6.1792161432094872e-05, 5.4754684242652729e-05, 6.1681035731453449e-05, 5.4139036365086213e-05, 6.8035071308258921e-05, 6.365832086885348e-05, 6.3183200836647302e-05, 5.9911850257776678e-05, 7.7321208664216101e-05, 6.3071514887269586e-05, 7.1337140980176628e-05, 5.5172469728859141e-05, 7.0786132710054517e-05, 9.6570431196596473e-05, 5.9322166634956375e-05, 5.9299309214111418e-05, 6.6658627474680543e-05, 5.7334207667736337e-05, 5.9334524848964065e-05, 5.5549589887959883e-05, 9.2648675490636379e-05, 9.9748882348649204e-05, 5.7915891375159845e-05, 6.1659346101805568e-05, 6.3051818870007992e-05, 6.3425271946471184e-05, 6.2813211116008461e-05, 7.7940865594428033e-05, 5.5373402574332431e-05, 7.1892398409545422e-05, 6.2149701989255846e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ 49,30,76,15,99,-9,-62,-24,8,-71,-50,75,54,42,16,-13,-9,47,-4,-9,-30,13,77,60,-44,-12,90,-10,43,-1,34,-1,127,-45,-5,87,27,-12,0,10,104,-64,12,110,30,-24,38,122, 
  /* [1][0][][] */ -42,23,-45,20,-21,101,61,24,78,-80,-127,108,71,-7,35,93,116,-22,40,127,-27,7,35,51,58,45,-19,118,37,25,85,-45,68,120,10,7,62,42,-49,-42,-50,45,-14,-67,-79,54,-72,-55, 
  /* [2][0][][] */ 18,5,-66,104,-56,-80,109,67,-92,114,-13,78,51,-9,66,-94,-87,-59,20,30,-109,-43,100,-6,-50,68,71,8,-76,55,104,62,-99,-6,-127,-88,-126,107,110,17,-121,-106,17,-38,-48,95,11,-117, 
  /* [3][0][][] */ 34,-22,47,5,-63,54,-64,29,45,34,62,0,75,99,57,51,8,80,-68,18,103,-78,-62,-103,-45,-70,-104,127,67,-86,82,-2,-98,0,-18,-20,-75,-16,12,77,-18,-89,-86,-72,54,36,-45,-94, 
  /* [4][0][][] */ 25,84,-25,29,-49,-53,6,-12,35,62,-27,22,6,-64,-38,-81,-51,-33,-90,-14,80,-118,58,0,-44,-26,40,-89,-75,8,-94,-79,46,91,-14,-127,-77,-26,-126,20,-72,-84,-101,-115,9,77,8,30, 
  /* [5][0][][] */ 91,-127,62,65,40,-77,37,64,109,-71,13,-50,-4,97,46,38,75,61,-39,93,42,48,19,-9,-56,-73,2,-61,45,45,29,-63,-18,-1,-54,26,-93,-21,31,30,-65,-31,50,98,-4,37,40,-104, 
  /* [6][0][][] */ 31,-50,111,83,-55,-28,24,78,13,-47,-7,-58,83,69,119,-73,61,20,18,111,-45,-86,102,75,-22,-55,13,-25,1,-71,52,-46,-58,-81,-20,-86,7,40,-127,86,83,77,37,7,-92,114,-94,-49, 
  /* [7][0][][] */ 114,40,-20,-21,-53,127,8,19,126,24,-113,26,55,-58,57,95,75,28,14,120,63,39,-5,100,-28,103,53,75,-43,116,-13,45,35,41,73,78,-81,74,-50,-11,82,-29,84,83,40,19,67,-120, 
  /* [8][0][][] */ 25,80,-38,-91,58,-3,-82,-38,-19,12,101,86,32,-59,-85,-79,-93,79,-57,0,19,-23,73,79,-103,97,33,52,-76,-1,-84,100,83,-38,41,25,106,42,40,56,86,66,-113,-120,25,-46,14,127, 
  /* [9][0][][] */ 58,46,127,64,105,-42,-22,-46,56,58,42,87,32,-25,-28,-18,51,49,-29,-11,39,123,-18,-32,107,24,55,43,19,-9,-24,117,99,18,70,41,3,58,27,-18,84,-15,81,7,91,43,-28,111, 
  /* [10][0][][] */ -68,84,105,-26,-18,106,127,15,15,25,28,-56,92,85,-34,41,-66,63,-92,-43,-7,38,59,-53,9,90,-126,-69,-13,60,-67,-79,45,122,105,74,-21,24,-25,76,-17,108,-90,-81,-76,-46,6,-59, 
  /* [11][0][][] */ 107,-28,-18,63,98,39,50,47,108,91,-46,90,-33,-46,42,-61,-11,-58,73,44,44,69,36,-79,-57,-127,4,54,50,16,40,8,-43,-75,30,55,-56,66,-10,-40,-13,70,-34,31,-8,-26,-54,-88, 
  /* [12][0][][] */ 5,39,-51,0,75,16,-22,33,-54,80,-64,-8,-70,27,53,-63,-127,-52,-64,-72,15,-30,-1,111,-86,-81,79,-87,83,8,-53,102,-104,-69,-69,14,-26,-83,-43,52,87,57,-100,-67,-77,-84,-88,91, 
  /* [13][0][][] */ 48,-43,96,102,65,93,89,27,33,-98,-19,-24,68,50,24,-2,-127,-74,-89,21,44,-19,89,-36,-72,73,-25,32,-39,-90,61,2,1,113,-18,17,-55,-20,5,87,-45,64,-61,-43,-66,16,-16,-28, 
  /* [14][0][][] */ -26,-58,45,32,41,-24,-17,-63,-50,-28,34,57,34,-54,-54,-57,22,-17,5,8,-30,20,-1,28,-71,-35,42,10,-73,-72,-47,22,127,-21,-4,0,57,62,21,-69,-3,-70,15,70,35,-66,125,-19, 
  /* [15][0][][] */ -6,-17,-7,95,70,-64,69,-102,38,-18,-84,6,127,-5,-95,-47,30,1,-106,25,45,17,59,105,60,114,-4,99,47,39,51,-109,-31,48,-33,-9,-60,106,100,-29,9,109,-55,-64,4,-72,-44,-82, 
  /* [16][0][][] */ -45,-29,104,-42,53,127,-27,61,72,70,-87,80,-9,-21,-25,-37,126,92,87,83,124,88,-24,71,-2,47,-42,78,-71,40,55,33,-78,84,68,66,-20,59,-58,-45,30,-20,88,103,77,118,94,-31, 
  /* [17][0][][] */ 2,-61,46,108,-36,-81,-37,-86,9,-83,54,57,97,53,-112,84,-33,49,56,103,-73,6,30,-24,-9,107,-69,35,127,-66,-27,48,-13,29,43,1,-14,80,-92,28,-78,-12,-20,-73,-26,19,72,-77, 
  /* [18][0][][] */ -88,63,109,-41,-12,-90,-70,20,17,93,-89,-40,-54,53,65,-40,22,-12,56,-9,109,-35,29,-72,32,-84,0,127,49,50,15,49,56,4,-96,-87,-24,38,-58,86,-41,-16,-30,-15,-91,36,29,-20, 
  /* [19][0][][] */ -3,14,52,19,38,-96,72,64,66,-76,17,-29,-104,12,-68,40,47,-115,80,34,-38,55,-69,-6,51,-87,8,-78,-99,-127,-77,24,55,-89,11,-19,-10,-79,-65,-107,26,-122,-94,-11,-94,8,94,-102, 
  /* [20][0][][] */ -21,67,55,80,-98,77,3,42,-2,-4,-98,-1,-2,69,25,-84,-19,-44,-77,-43,8,-57,-87,-80,67,-81,-74,31,9,-4,-55,96,127,32,-12,39,28,-45,-25,-122,-97,-45,-102,-112,-44,-77,-88,94, 
  /* [21][0][][] */ 68,81,76,-6,74,-50,51,21,-26,-52,-40,52,33,38,-26,-110,-89,13,11,1,81,22,115,-54,10,-26,21,39,28,-8,24,8,52,47,-15,13,112,97,19,23,32,-22,58,-23,-44,-38,12,127, 
  /* [22][0][][] */ 34,113,-11,-34,127,-35,57,33,-62,57,-15,-37,70,-51,-58,-66,18,57,-61,-30,49,-15,67,22,41,-10,-18,38,-40,-49,-29,-48,69,39,20,29,50,20,14,-63,13,-13,16,98,24,-68,64,44, 
  /* [23][0][][] */ 52,-97,-11,38,75,-127,-13,-111,39,-91,68,57,10,-116,0,-55,108,-44,-117,76,71,-90,84,-51,-12,-28,106,4,49,30,52,-51,-5,24,5,17,78,-22,-116,-8,-113,-19,-7,-106,-76,-100,98,19, 
  /* [24][0][][] */ -78,-92,-93,-47,-76,-94,-38,-66,82,127,89,38,68,76,-24,-92,-85,44,28,-37,100,-65,-40,-36,49,-28,57,66,108,65,21,-47,-14,24,36,42,-48,-66,41,7,-59,-111,110,-13,39,-13,53,39, 
  /* [25][0][][] */ -66,16,-17,0,113,-93,-90,39,28,-79,39,41,74,7,-82,27,-74,64,43,-94,65,96,14,-66,3,-12,-78,56,53,-79,57,114,108,-90,39,87,111,-1,20,-6,-47,96,-87,10,112,23,127,73, 
  /* [26][0][][] */ 56,-110,3,15,-63,26,19,8,-80,-91,25,94,-51,-23,26,34,115,44,-57,-31,29,78,93,43,66,88,32,69,42,27,-75,15,-8,-22,-61,-99,-35,71,-65,110,-71,127,57,50,-87,85,-63,91, 
  /* [27][0][][] */ 27,10,-52,-107,-86,-66,-38,6,77,122,60,-112,-50,76,107,-19,57,-21,98,-65,-46,11,-9,-16,-77,-9,-111,2,50,55,8,25,33,29,-102,-33,-100,-31,-69,91,-66,23,62,17,127,33,104,58, 
  /* [28][0][][] */ 102,46,116,83,-30,-24,-43,-30,-32,-63,72,91,-5,-33,30,57,68,116,-27,83,8,68,-14,-23,-76,88,-23,-25,-20,-38,28,22,-30,54,98,103,71,-23,26,53,127,40,-31,59,-62,13,39,108, 
  /* [29][0][][] */ 30,29,36,-38,-102,-10,-127,-16,75,-31,-82,-113,86,-122,-68,-62,-115,78,15,-86,-91,-56,38,-15,-47,-9,-61,-47,-118,-27,95,-24,30,-14,-101,-58,-33,82,-42,113,31,89,-63,59,-3,82,-38,-31, 
  /* [30][0][][] */ 14,-82,-38,45,-82,14,-24,-1,105,9,19,-48,-127,31,53,-23,-24,28,77,-76,45,-72,-70,-10,-90,-2,-78,92,-6,-70,-54,12,-84,-37,-121,-14,-3,7,6,35,69,-90,12,39,100,-23,94,14, 
  /* [31][0][][] */ 62,-92,46,105,49,72,-26,-88,-35,-16,-81,-91,91,-102,-36,127,-98,-90,30,54,64,30,-33,109,18,-80,-7,45,-42,-63,29,98,-22,39,-80,-3,80,-14,-68,-86,55,-38,-24,-7,-23,-51,-77,-5, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0045588687062263489, 0.0026261669117957354, 0.0023270740639418364, 0.0026214439421892166, 0.0023009090218693018, 0.0028914904687553644, 0.0027054785750806332, 0.002685285871848464, 0.002546253614127636, 0.0032861514482647181, 0.0026805393863469362, 0.0030318284407258034, 0.0023448299616575241, 0.0030084105674177408, 0.0041042431257665157, 0.0025211919564753771, 0.0025202205870300531, 0.002832991536706686, 0.0024367037694901228, 0.0025217172224074602, 0.0023608575575053692, 0.0039375685155391693, 0.0042393272742629051, 0.0024614252615720034, 0.0026205221656709909, 0.0026797021273523569, 0.0026955739594995975, 0.0026695614214986563, 0.0033124866895377636, 0.0023533694911748171, 0.0030554269906133413, 0.0026413621380925179, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 987, -1347, 2925, 1899, 2362, 70, 984, 3722, -2321, -1834, -636, 7701, 3344, 3623, 4757, -2108, -2056, 7793, 2671, 4436, 3176, 20458, 14189, 608, -2077, 1351, -453, -644, 1802, 1279, 4098, 11196, -703, 302, 11411, 5285, 5376, 2202, 1546, -747, 2370, -1198, 7811, -127, 253, 2617, -1230, 4569, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00036340465885587037, 0.00024725322145968676, 0.00027716768090613186, 0.00027779737138189375, 0.00019663557759486139, 0.000313882454065606, 0.00025074282893911004, 0.00019641368999145925, 0.00017149944324046373, 0.00021353796182665974, 0.00042972638038918376, 0.00010922168439719826, 0.00019342463929206133, 0.00015177229943219572, 0.0001832997368182987, 0.00025779329007491469, 0.00026617624098435044, 0.00013192670303396881, 0.00023568738834001124, 0.00017777532048057765, 0.00025428412482142448, 5.8385252486914396e-05, 6.9225425249896944e-05, 0.00037677455111406744, 0.00022011756664142013, 0.00026445879484526813, 0.00033095377148129046, 0.00029569491744041443, 0.00020039817900396883, 0.00025485019432380795, 0.0001637084933463484, 7.6890159107279032e-05, 0.00028857385041192174, 0.00035933245089836419, 8.70043586473912e-05, 0.00014001708768773824, 0.00015669790445826948, 0.0002729695406742394, 0.00030014742515049875, 0.00044724807958118618, 0.0002644102496560663, 0.00035166143788956106, 0.00012007929035462439, 0.00047912611626088619, 0.00045080066774971783, 0.00021331594325602055, 0.00032060570083558559, 0.00018685293616726995, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -20,22,127,-8,-11,51,9,-77, 
  /* [1][0][][] */ 119,-78,77,-84,-8,-65,127,40, 
  /* [2][0][][] */ 66,74,59,-57,-61,12,127,-35, 
  /* [3][0][][] */ 5,37,6,-30,26,-88,127,13, 
  /* [4][0][][] */ 127,-86,-68,-64,-116,-45,-32,106, 
  /* [5][0][][] */ 37,76,127,-10,21,-51,18,-32, 
  /* [6][0][][] */ 110,112,-10,127,-89,31,35,112, 
  /* [7][0][][] */ -15,0,-7,43,28,-106,-127,-46, 
  /* [8][0][][] */ 93,88,-37,96,-59,32,-127,-67, 
  /* [9][0][][] */ 127,-37,-41,63,-12,-30,14,-101, 
  /* [10][0][][] */ 79,18,-5,9,-19,127,30,8, 
  /* [11][0][][] */ 115,-14,-11,-127,109,-79,-52,73, 
  /* [12][0][][] */ -46,111,72,-24,4,50,-68,127, 
  /* [13][0][][] */ 127,9,-124,28,39,-90,58,-91, 
  /* [14][0][][] */ 110,39,-6,-11,-127,21,-84,-23, 
  /* [15][0][][] */ 21,36,-68,-25,-127,-77,103,90, 
  /* [16][0][][] */ 5,-44,127,-2,107,-65,-87,-50, 
  /* [17][0][][] */ 28,-7,70,-4,127,-60,-54,-7, 
  /* [18][0][][] */ 127,-38,124,68,-35,23,-61,-18, 
  /* [19][0][][] */ 70,59,46,-56,-32,-127,12,-50, 
  /* [20][0][][] */ 49,-22,39,127,13,-63,-72,62, 
  /* [21][0][][] */ 96,-9,-71,-127,52,-71,-5,88, 
  /* [22][0][][] */ -48,-88,-70,-39,47,-49,127,-57, 
  /* [23][0][][] */ 4,28,37,-37,-100,-127,-6,-33, 
  /* [24][0][][] */ 127,-2,78,39,-4,-32,-95,93, 
  /* [25][0][][] */ 74,74,-21,-41,-10,-37,16,127, 
  /* [26][0][][] */ -88,-31,35,-127,89,10,-30,-64, 
  /* [27][0][][] */ 88,127,-17,-42,16,46,31,1, 
  /* [28][0][][] */ 27,127,-24,13,9,-57,-11,116, 
  /* [29][0][][] */ 93,1,74,104,31,-11,-127,23, 
  /* [30][0][][] */ 127,-89,-85,108,57,-6,-66,75, 
  /* [31][0][][] */ 93,-102,33,43,-87,-98,-127,74, 
  /* [32][0][][] */ -100,-75,35,-127,59,0,-16,-62, 
  /* [33][0][][] */ 29,20,35,28,26,-83,127,55, 
  /* [34][0][][] */ -50,73,127,-99,107,-66,-79,80, 
  /* [35][0][][] */ -104,33,34,122,10,127,53,-40, 
  /* [36][0][][] */ 74,15,-22,-127,36,3,22,50, 
  /* [37][0][][] */ 50,72,0,19,-98,127,84,56, 
  /* [38][0][][] */ -12,-73,18,127,37,60,7,117, 
  /* [39][0][][] */ 18,17,-127,49,-2,-42,-10,62, 
  /* [40][0][][] */ 50,12,-75,-15,-50,60,-49,127, 
  /* [41][0][][] */ 37,14,29,-35,-98,-127,-7,-2, 
  /* [42][0][][] */ -67,61,-84,88,-13,71,-43,-127, 
  /* [43][0][][] */ -10,18,-32,-127,-28,-11,-33,-103, 
  /* [44][0][][] */ 64,12,6,71,19,127,-50,20, 
  /* [45][0][][] */ 13,92,-24,24,127,-44,-80,-18, 
  /* [46][0][][] */ 63,-58,-10,127,58,18,-46,60, 
  /* [47][0][][] */ -35,-112,67,-21,127,27,53,42, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0035383482463657856, 0.0024074208922684193, 0.0026986878365278244, 0.0027048189658671618, 0.0019145740661770105, 0.003056167159229517, 0.0024413981009274721, 0.0019124136306345463, 0.0016698320396244526, 0.0020791469141840935, 0.0041841003112494946, 0.0010634545469656587, 0.0018833102658390999, 0.0014777554897591472, 0.0017847275594249368, 0.0025100461207330227, 0.0025916679296642542, 0.0012845256133005023, 0.0022948083933442831, 0.0017309380928054452, 0.002475878456607461, 0.00056847743690013885, 0.0006740245153196156, 0.0036685261875391006, 0.0021432102657854557, 0.0025749458000063896, 0.0032223849557340145, 0.0028790812939405441, 0.001951209269464016, 0.0024813900236040354, 0.0015939741861075163, 0.00074865348869934678, 0.0028097459580749273, 0.0034986983519047499, 0.00084713200340047479, 0.0013632989721372724, 0.0015257145278155804, 0.002657812088727951, 0.0029224338941276073, 0.0043547032400965691, 0.0025744731537997723, 0.0034240083768963814, 0.00116917141713202, 0.004665088839828968, 0.0043892934918403625, 0.0020769850816577673, 0.003121629124507308, 0.0018193237483501434, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -10477, -2021, 1631, -12527, 3262, -2188, 10441, 8803, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00016976470942609012, 0.00022352203086484224, 6.2126673583406955e-05, 0.00010815164569066837, 0.0001470819697715342, 0.0001240165438503027, 0.00010980221122736111, 0.00013759979628957808, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 119,-19,22,-22,25,58,6,37,127,-82,51,11,-61,49,10,-54,14,-26,-9,-12,6,-57,11,-31,-41,-26,-40,-45,-22,80,-21,21,13,-48,12,-33,67,-56,-62,14,21,-37,-56,-17,50,-43,47,-43, 
  /* [1][0][][] */ 50,-16,-2,71,42,73,27,28,74,-70,-6,0,31,11,-41,-22,-37,-30,-62,1,10,-54,56,73,1,-60,-7,42,-29,65,-59,127,-38,32,-36,-25,-50,-20,-14,-35,-57,-36,-39,27,5,-18,12,-81, 
  /* [2][0][][] */ -49,-30,-63,46,-74,-12,6,31,-116,-93,-102,-49,-38,35,-122,-20,82,-95,43,-4,127,66,-26,-4,52,107,30,-77,-67,15,44,-8,-50,23,54,-43,71,-9,69,104,-56,70,42,-20,-60,71,-21,57, 
  /* [3][0][][] */ 2,-8,-30,38,-17,-11,-26,60,101,94,-127,-10,8,-37,-19,72,-64,-17,6,48,-31,7,83,5,21,24,-67,43,-25,13,-37,-25,20,32,45,3,66,-1,44,16,-60,93,90,14,24,-23,-51,-44, 
  /* [4][0][][] */ -28,-69,19,-37,16,77,-43,-62,-15,-52,47,33,-37,-18,-24,17,70,12,-13,31,-58,-6,76,-25,-72,-22,8,16,27,-29,-11,60,-61,47,-21,37,-38,24,-15,14,-22,36,-29,27,127,42,-26,-7, 
  /* [5][0][][] */ -62,-52,51,-127,-18,6,-44,-62,-15,50,-47,59,-60,27,49,22,75,26,58,6,34,12,-17,-52,35,-77,2,-38,-12,-41,43,-74,2,-29,62,0,-38,27,45,55,85,34,12,-9,3,3,-35,28, 
  /* [6][0][][] */ -55,-87,58,40,-75,-64,8,-77,-96,26,-127,23,29,-51,41,31,-43,32,1,127,-9,-11,110,63,-114,-33,48,22,10,-29,-28,-71,-13,82,61,-107,-36,73,83,-40,-52,85,68,-56,-37,-34,-22,11, 
  /* [7][0][][] */ 32,-16,21,-16,1,15,-49,-38,-127,-30,107,27,16,-15,26,18,9,33,-13,-25,-41,24,4,-31,26,-8,-47,17,-17,-36,-26,-46,-80,-35,-33,2,45,-41,-6,-10,73,26,36,-5,-1,-29,37,23, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.007214999757707119, 0.0094996858388185501, 0.0026403835508972406, 0.0045964447781443596, 0.0062509835697710514, 0.0052707032300531864, 0.0046665938571095467, 0.005847991444170475, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -4535, 1301, 7160, 1631, -478, -5097, -5506, 7991, 5428, -3394, -2430, -5552, 1086, 10880, 14728, 3670, 4181, -3579, 5800, -1797, 15980, -3354, -3001, 460, 4148, -4238, -2430, -1885, 7307, -23305, -4288, -1599, 1649, -2232, 850, -447, 7418, -3305, 510, -14090, -243, 3613, -3038, -1504, 2092, -575, 7303, -3445, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00022003985941410065, 0.00015524134505540133, 0.00016576003690715879, 0.00011083178105764091, 0.00020827694970648736, 0.00015062953752931207, 0.00018921004084404558, 0.00018447930051479489, 0.00020376539032440633, 0.00042210143874399364, 0.00025544880190864205, 9.6190953627228737e-05, 0.00029610443743877113, 9.737163782119751e-05, 0.00010031143028754741, 0.00015046707994770259, 0.00019023957429453731, 0.00012955210695508868, 9.8036864073947072e-05, 0.00019869903917424381, 0.00010423669300507754, 0.00023868978314567357, 0.0002106138999806717, 0.00020224889158271253, 0.00017762088100425899, 0.00024639474577270448, 0.00023416934709530324, 0.00032204846502281725, 9.2571754066739231e-05, 0.00014360727800522, 0.00013391724496614188, 0.00015458751295227557, 5.1860704843420535e-05, 0.00028648079023696482, 0.00017507652228232473, 0.00023100536782294512, 0.00016865813813637942, 7.7285840234253556e-05, 0.00013020623009651899, 5.3308296628529206e-05, 0.00027007097378373146, 0.00020900899835396558, 0.00017625562031753361, 0.00018118762818630785, 0.00013963336823508143, 0.00010431759437778965, 0.00023504384444095194, 0.00015172758139669895, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 82,57,-43,42,10,6,-21,26,45,-112,29,57,14,-96,-47,21,89,83,-93,-3,99,-35,-9,-22,59,-9,35,3,-127,49,-21,-48,98,16,60,27,-43,13,83,55,-83,55,-118,-47,24,-76,-49,-15, 105,127,-101,67,30,38,-48,-127,52,67,127,87,-49,-42,-15,-25,-52,95,-111,18,38,127,44,-27,15,5,23,127,-124,100,-37,-127,6,-32,-18,70,-83,127,51,58,-127,-90,49,3,2,33,-127,107, 64,80,-9,54,12,-5,-14,52,30,-9,24,66,19,-62,-36,-34,92,46,-49,-24,97,50,-12,54,40,43,23,-10,-23,31,-43,-30,61,20,73,14,-33,58,80,16,-59,54,22,42,34,93,-3,-13, 
  /* [0][1][][] */ -14,-70,-119,121,10,68,92,-16,46,29,-55,127,122,-7,-47,-106,-8,127,69,-16,-127,32,41,-106,31,22,29,11,-19,127,36,65,121,127,11,41,-78,-5,-30,112,56,9,62,-99,23,-99,-10,106, 54,-120,-45,-127,102,3,127,-76,-127,127,-4,-7,-127,127,127,-39,-127,66,19,127,7,-66,127,0,-127,127,55,-86,-60,54,-127,112,127,-103,-22,119,127,75,-17,127,97,-73,-35,13,112,-40,3,38, -6,-35,-127,98,-9,127,67,-12,42,47,-55,70,-23,15,-44,-39,-21,90,127,-55,-125,63,-53,127,12,-6,25,34,82,106,24,51,46,-2,-65,-127,-55,-50,23,42,41,88,-31,127,-5,92,-22,57, 
  /* [0][2][][] */ -30,-26,-3,47,-28,25,12,7,26,-20,1,82,27,-72,-63,26,88,12,19,23,-90,28,9,-25,34,16,12,-5,-15,-3,68,9,5,10,127,-43,13,79,39,97,20,98,127,-29,-43,-127,-35,20, -127,-25,-44,88,-127,17,-56,-16,13,71,-86,66,-40,-13,-42,127,-71,43,-92,-9,-117,-2,14,-52,-8,77,-127,-29,-102,123,89,28,33,-21,26,-2,-4,99,-25,68,-43,-127,-101,-27,-127,43,-75,127, -16,-24,-6,15,5,3,6,0,18,-57,-20,-4,2,-69,-30,1,80,-48,124,13,-74,35,5,17,25,-24,-3,-12,26,16,43,4,29,16,74,31,15,44,127,68,41,113,-57,38,-25,62,-11,-8, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0093516940250992775, 0.0065977573394775391, 0.0070448014885187149, 0.004710350651293993, 0.0088517703115940094, 0.0064017553813755512, 0.0080414265394210815, 0.0078403698280453682, 0.0086600286886096001, 0.017939310520887375, 0.010856574401259422, 0.0040881154127418995, 0.012584438547492027, 0.0041382946074008942, 0.0042632357217371464, 0.0063948505558073521, 0.008085181936621666, 0.0055059641599655151, 0.0041665667667984962, 0.0084447087720036507, 0.0044300593435764313, 0.010144315659999847, 0.0089510902762413025, 0.0085955774411559105, 0.0075488872826099396, 0.010471776127815247, 0.0099521968513727188, 0.013687059283256531, 0.003934299573302269, 0.0061033093370497227, 0.0056914826855063438, 0.006569969467818737, 0.0022040798794478178, 0.012175433337688446, 0.0074407518841326237, 0.0098177278414368629, 0.0071679707616567612, 0.0032846482936292887, 0.0055337646044790745, 0.002265602583065629, 0.011478016152977943, 0.0088828820735216141, 0.0074908635579049587, 0.0077004740014672279, 0.0059344181790947914, 0.0044334977865219116, 0.0099893631413578987, 0.0064484220929443836, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 26014, 4476, 1051, 1002, 4238, 2154, 4241, 3642, 3391, -3691, 17124, 1197, 8585, 1408, 6027, 1285, 3068, -889, 6217, 120, 2713, -4, 1891, 5043, 1350, -2918, 945, 8343, 687, 12116, 764, 5862, 261, 3775, -437, -1612, 2304, 1661, 32, 880, 7300, -1745, 7512, 2408, 717, 4435, 3310, -1526, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 4.1423478251090273e-05, 0.00019386183703318238, 0.00020973454229533672, 0.0002557481057010591, 0.0001880488998722285, 0.00024157001462299377, 0.00016967121337074786, 0.00020615395624190569, 0.00014807104889769107, 0.00017421385564375669, 6.380043487297371e-05, 0.00021004302834626287, 0.00010625965660437942, 0.00025650902534835041, 0.00012781945406459272, 0.00027295274776406586, 0.00023585051530972123, 0.00025473258574493229, 0.0001486159599153325, 0.00025790135259740055, 0.00021422833378892392, 0.00018182281928602606, 0.0002409140724921599, 0.00015859858831390738, 0.00029202242149040103, 0.00021648152323905379, 0.00034236142528243363, 0.00012211888679303229, 0.00032342722988687456, 7.8033655881881714e-05, 0.00035955046769231558, 0.00016021907504182309, 0.00032793579157441854, 0.00022479076869785786, 0.00021176277368795127, 0.00029733616975136101, 0.00027795016649179161, 0.00020813166338484734, 0.00029041551169939339, 0.00023680231242906302, 0.00013377748837228864, 0.0002134719688910991, 0.00010998612560797483, 0.00018920810543932021, 0.00032807333627715707, 0.00018896300753112882, 0.00019290733325760812, 0.00019157998031005263, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,41,-16,-6,48,59,-6,-58, 
  /* [1][0][][] */ -9,-78,-38,-24,-62,-127,30,17, 
  /* [2][0][][] */ -73,84,8,-54,-75,40,-85,127, 
  /* [3][0][][] */ 44,31,64,-17,-64,-127,56,-11, 
  /* [4][0][][] */ 31,57,-127,43,-125,89,39,33, 
  /* [5][0][][] */ -20,51,25,-22,-91,-127,-54,-20, 
  /* [6][0][][] */ -63,127,112,-22,-75,-17,-2,-45, 
  /* [7][0][][] */ -16,6,52,63,-2,-127,-7,74, 
  /* [8][0][][] */ 127,4,-74,71,-109,-76,-112,-6, 
  /* [9][0][][] */ 109,-21,-74,-69,-9,-35,-44,127, 
  /* [10][0][][] */ -105,4,24,127,-13,82,42,-102, 
  /* [11][0][][] */ 23,56,69,-1,2,114,127,78, 
  /* [12][0][][] */ -105,-124,-65,-88,127,-64,-16,62, 
  /* [13][0][][] */ -15,4,-10,53,20,-127,46,48, 
  /* [14][0][][] */ 56,58,123,32,49,-127,-71,-15, 
  /* [15][0][][] */ -62,68,127,65,13,39,36,-82, 
  /* [16][0][][] */ -22,-13,17,-60,127,-3,-36,-12, 
  /* [17][0][][] */ 39,-44,-42,3,-22,127,-42,31, 
  /* [18][0][][] */ -20,127,79,-62,-42,68,84,-78, 
  /* [19][0][][] */ 2,101,106,127,-39,49,50,50, 
  /* [20][0][][] */ 17,-1,43,-127,-41,19,56,5, 
  /* [21][0][][] */ -112,79,44,-127,120,76,104,-6, 
  /* [22][0][][] */ 79,-46,-104,48,78,-33,-59,127, 
  /* [23][0][][] */ 16,-125,-116,-27,28,-7,-79,127, 
  /* [24][0][][] */ 44,-11,-85,10,-47,54,-127,120, 
  /* [25][0][][] */ -16,-6,94,4,127,-40,-112,-48, 
  /* [26][0][][] */ -18,87,127,-37,-18,-26,46,-49, 
  /* [27][0][][] */ -49,26,87,-41,27,23,87,-127, 
  /* [28][0][][] */ 67,-14,60,127,52,-40,32,69, 
  /* [29][0][][] */ 102,122,125,66,-104,0,-127,106, 
  /* [30][0][][] */ 26,14,-47,58,-127,-21,-38,49, 
  /* [31][0][][] */ 25,117,101,-83,-69,8,127,-103, 
  /* [32][0][][] */ 63,-1,-13,47,82,127,17,-55, 
  /* [33][0][][] */ 14,-51,-127,3,17,-16,-40,99, 
  /* [34][0][][] */ 13,-59,21,-127,-4,68,-15,6, 
  /* [35][0][][] */ -26,-3,73,-15,11,-127,-6,-14, 
  /* [36][0][][] */ -5,22,-31,-127,3,18,3,-48, 
  /* [37][0][][] */ 73,-2,-8,-95,-70,127,-67,-69, 
  /* [38][0][][] */ 87,-73,-26,104,77,30,-31,127, 
  /* [39][0][][] */ 127,71,18,79,-12,92,-57,-29, 
  /* [40][0][][] */ 18,-111,-127,17,1,-4,-20,82, 
  /* [41][0][][] */ 23,-32,-127,-100,35,-79,-19,-41, 
  /* [42][0][][] */ 77,127,85,112,-70,-46,51,34, 
  /* [43][0][][] */ 124,-42,-98,-127,-100,-38,46,64, 
  /* [44][0][][] */ 14,85,91,-58,-112,5,73,-127, 
  /* [45][0][][] */ 43,34,-127,56,-25,13,18,44, 
  /* [46][0][][] */ 34,-46,-58,-127,-1,-21,-36,64, 
  /* [47][0][][] */ 103,-120,127,-64,73,-28,6,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00055982335470616817, 0.0026199726853519678, 0.0028344865422695875, 0.0034563431981950998, 0.0025414128322154284, 0.0032647314947098494, 0.0022930451668798923, 0.0027860961854457855, 0.0020011267624795437, 0.0023544372525066137, 0.00086223980179056525, 0.0028386556077748537, 0.0014360608765855432, 0.0034666266292333603, 0.0017274337587878108, 0.0036888578906655312, 0.0031874345149844885, 0.0034426187630742788, 0.0020084909629076719, 0.0034854435361921787, 0.0028952185530215502, 0.0024572697002440691, 0.0032558667007833719, 0.0021434025838971138, 0.0039465776644647121, 0.0029256695415824652, 0.0046268911100924015, 0.0016503926599398255, 0.0043710023164749146, 0.001054596621543169, 0.0048591946251690388, 0.0021653028670698404, 0.0044319336302578449, 0.003037966089323163, 0.0028618974611163139, 0.0040183910168707371, 0.0037563962396234274, 0.0028128242120146751, 0.0039248606190085411, 0.0032002977095544338, 0.0018079545116052032, 0.0028849965892732143, 0.0014864227268844843, 0.0025570790749043226, 0.0044337925501167774, 0.0025537668261677027, 0.0026070729363709688, 0.0025891342666000128, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12984, -34766, 1650, 9884, -18057, 442, -25526, -1839, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00011420527152949944, 6.9382673245854676e-05, 8.846213313518092e-05, 6.1904480389785022e-05, 5.6353412219323218e-05, 7.5798823672812432e-05, 8.2169150118716061e-05, 8.0630044976714998e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 41,50,-77,51,14,28,-82,-24,4,-23,2,-34,-25,1,36,10,53,-21,48,-18,11,-40,39,-3,9,-19,-16,11,-13,2,-19,7,45,20,25,9,127,59,26,-32,-3,-20,-4,-19,72,21,10,-48, 
  /* [1][0][][] */ 84,38,14,18,26,93,-29,-28,41,61,-59,-60,100,-10,8,46,-3,46,21,-85,119,-34,64,30,26,29,70,13,26,-77,44,95,66,102,-7,127,56,15,8,24,82,15,37,18,25,38,114,-81, 
  /* [2][0][][] */ 9,11,71,127,-58,37,-12,43,30,54,9,-66,-62,100,28,56,-108,-87,92,-1,-17,56,-25,-96,-40,-44,46,-1,-85,21,2,0,-25,-16,-78,-52,7,24,-85,-19,-41,-45,-37,37,62,-68,-39,23, 
  /* [3][0][][] */ -40,33,-75,-19,30,-87,-9,59,125,-67,-28,5,-12,-17,6,76,38,-1,-28,-36,-25,19,-94,49,-21,-16,22,-10,59,-33,38,-70,31,-24,-45,-52,-127,-1,-76,18,-18,-52,43,-9,-60,15,-18,-38, 
  /* [4][0][][] */ 36,-9,28,-28,-75,81,31,71,-127,-40,84,35,61,-51,-79,-92,121,59,78,-9,24,-77,-16,57,-47,11,-62,-124,-46,-53,91,24,78,-4,111,90,73,69,66,46,17,51,-67,-29,74,61,86,-67, 
  /* [5][0][][] */ 17,70,16,87,23,37,-51,-98,-105,47,-1,-9,25,48,27,-79,97,96,-13,39,-14,-37,-10,-48,-91,-84,-45,70,-5,46,-21,35,-4,-90,67,15,-29,127,-28,-97,-13,-30,-30,-51,-8,-17,-39,100, 
  /* [6][0][][] */ 95,59,-7,127,-74,34,13,57,23,-82,57,98,94,-33,-48,-61,55,23,-88,21,58,-30,-9,2,9,49,-18,-58,17,-39,53,53,27,-23,-2,90,88,-94,-5,12,-71,66,-104,38,59,100,108,-50, 
  /* [7][0][][] */ 19,39,127,46,-25,61,-86,27,-49,91,-14,-7,52,66,8,-25,-52,-7,-71,6,-8,45,-12,-35,-4,53,46,-15,-10,-9,3,5,-76,-6,78,23,108,-15,36,-17,0,-50,-19,-58,4,-21,13,20, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0052167121320962906, 0.0031692881602793932, 0.004040807019919157, 0.0028276965022087097, 0.0025741327553987503, 0.0034623676910996437, 0.0037533538416028023, 0.003683050163090229, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 8134, -10700, -709, 1698, -1188, 7655, 4352, -3032, -8897, 3109, -3841, -980, -5362, -9211, 4940, -1175, -2725, 23982, -3534, -9405, 13753, -908, 28, -2072, -2172, -815, -2090, -2288, -1239, 1922, 1789, 15999, 9333, 441, 3082, 11148, -76, 18957, -46, -2448, -2826, -5491, -583, 522, 5325, 13752, 16153, -5626, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00016030267579481006, 0.00012722777319140732, 0.0012926661875098944, 0.00023325376969296485, 0.00020732807752210647, 0.0002802769304253161, 0.00012288271682336926, 0.00030636703013442457, 7.6243275543674827e-05, 0.00025021369219757617, 0.00012778198288287967, 0.00015933768008835614, 0.00017728214152157307, 0.00011461072426754981, 0.00011459365487098694, 0.00013671570923179388, 0.00016763400344643742, 6.6773514845408499e-05, 0.00034177000634372234, 6.0665042838081717e-05, 9.8804637673310935e-05, 0.00030936076655052602, 0.00017858510545920581, 0.00018575933063402772, 0.00031788964406587183, 0.00029197189724072814, 0.00022002312471158803, 0.00038150901673361659, 0.00022143559181131423, 0.00014796377217862755, 7.4214069172739983e-05, 0.00016102902009151876, 0.00015812013589311391, 0.00020841894729528576, 0.00011846444976981729, 0.00013249565381556749, 0.00043257538345642388, 0.00012834786321036518, 0.00010152821050724015, 0.00028614260372705758, 8.9656874479260296e-05, 0.00018556295253802091, 0.00020540639525279403, 0.00013552857853937894, 0.000143233104608953, 0.00010351238597650081, 8.9448571088723838e-05, 0.00017927245062310249, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -12,-16,49,12,127,-35,14,8,40,20,27,-24,-6,-9,-59,1,31,-41,-15,80,-40,-3,-72,2,4,6,31,-35,-35,127,16,-57,-23,88,119,-63,9,-70,-127,-37,22,-38,-27,-59,0,-26,-127,3, -39,55,13,44,-8,-79,97,-17,90,10,68,127,30,127,-9,4,86,-127,13,90,-25,-17,91,-114,21,49,-99,41,-20,-108,127,-93,-127,-111,36,-15,-63,-40,-116,17,-81,-25,15,-127,20,-118,4,63, -6,-60,24,-2,48,-36,22,-4,38,13,35,-75,-52,-40,-90,59,4,-67,-10,93,-19,-7,-42,-3,32,16,16,-91,-45,63,-72,-89,5,0,120,-38,15,-51,-94,17,5,-25,4,-32,-27,-127,-123,2, 
  /* [0][1][][] */ -127,113,-30,-52,0,-89,7,-3,42,20,68,45,85,93,-66,-5,127,-90,13,37,-39,-52,-119,-10,-127,-11,-41,10,-14,-7,99,-63,-26,127,-111,-71,26,-83,49,80,-127,19,-91,86,-21,-77,-43,-41, -11,118,127,127,-27,60,-127,127,127,-127,-10,57,127,116,127,-121,-40,-93,127,-18,-127,127,127,10,92,98,64,127,127,-88,127,19,-32,-108,-18,-127,127,127,76,88,-105,127,-22,98,127,40,-44,-95, -49,56,-51,-47,-63,-95,17,-12,15,5,127,29,3,63,-70,127,106,-79,-7,127,7,-98,-124,-28,11,-11,-36,15,-10,14,92,-94,6,-25,-127,-89,32,-97,28,-127,-72,25,127,95,-41,-88,1,127, 
  /* [0][2][][] */ -59,-27,16,-7,30,-43,23,10,88,36,99,21,19,-25,-81,88,59,-23,-43,-18,-28,18,-58,56,-3,-18,-33,-25,16,81,1,-17,-1,49,-78,20,-48,-83,79,-32,79,-6,-9,21,-32,25,-34,-19, -84,127,-3,11,-81,-127,68,-59,105,32,39,-76,-26,32,-93,98,37,13,-1,81,-67,16,104,127,15,-127,127,8,27,-54,-105,-127,12,-47,-80,-28,-75,-84,67,50,127,49,-28,54,-34,-40,-98,-26, 7,-9,10,-1,-31,6,45,21,97,26,93,-7,22,-12,-39,96,41,-39,-47,57,-27,-4,-51,48,11,-8,-29,-55,12,19,-63,-19,13,14,-54,32,-39,-64,38,17,33,-2,34,17,-28,-61,-15,46, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0068128635175526142, 0.0054071801714599133, 0.054938312619924545, 0.0099132852628827095, 0.0088114431127905846, 0.011911769397556782, 0.0052225152030587196, 0.013020598329603672, 0.0032403392251580954, 0.010634081438183784, 0.0054307342506945133, 0.0067718513309955597, 0.0075344908982515335, 0.0048709558323025703, 0.0048702303320169449, 0.0058104172348976135, 0.0071244449354708195, 0.0028378742281347513, 0.014525224454700947, 0.0025782643351703882, 0.0041991970501840115, 0.013147832825779915, 0.0075898668728768826, 0.0078947711735963821, 0.013510309159755707, 0.012408805079758167, 0.0093509824946522713, 0.016214132308959961, 0.0094110127538442612, 0.0062884604558348656, 0.0031540978234261274, 0.0068437331356108189, 0.0067201056517660618, 0.0088578052818775177, 0.005034739151597023, 0.0056310654617846012, 0.018384452909231186, 0.0054547842592000961, 0.0043149488046765327, 0.012161060236394405, 0.0038104171399027109, 0.0078864255920052528, 0.0087297717109322548, 0.0057599646970629692, 0.0060874065384268761, 0.0043992763385176659, 0.0038015642203390598, 0.007619079202413559, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 388, 4010, -5117, 3015, 2059, 3468, 2413, 5491, 7612, 2549, -2241, 95, 1257, 4231, 1782, -460, -1098, 6007, 8847, 375, 1474, 6973, 2324, 7151, 4986, 5851, 1162, 7872, 2306, 2083, -1404, 8334, 1528, 6982, 4615, 4275, 2015031, 8920, 4255, 7165, 2231, 1181, 3740, 1369, 2333, 990, 1082, 1484, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00036820114473812282, 0.00016839933232404292, 0.00015760157839395106, 0.00020701407629530877, 0.00025262465351261199, 0.00014144100714474916, 0.00021680504141841084, 0.00015622394857928157, 0.0001215878946823068, 0.00026840539067052305, 0.00018281879602000117, 0.00021453278895933181, 0.00025116521283052862, 0.00014004939293954521, 0.00028363137971609831, 0.00021431114873848855, 0.00016752789088059217, 0.00013175126514397562, 9.6771560492925346e-05, 0.00016571181186009198, 0.00033709304989315569, 0.00011821593943750486, 0.00025848633958958089, 0.00011762664507841691, 0.00016581328236497939, 0.00014975963858887553, 0.00023487539147026837, 0.00011168945638928562, 0.00015887529298197478, 0.00032110410393215716, 0.00029436757904477417, 9.9735305411741138e-05, 0.0002865187416318804, 0.00012989189417567104, 0.00014643867325503379, 0.0001706719194771722, 8.1349651281925617e-07, 0.00010553985339356586, 0.00014494461356662214, 0.00013243536523077637, 0.00020522924023680389, 0.00022555571922566742, 0.00020203273743391037, 0.0001984079135581851, 0.00025822134921327233, 0.00021668027329724282, 0.0002992583904415369, 0.00021550152450799942, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -82,-127,-22,20,-35,-1,31,-38, 
  /* [1][0][][] */ -21,127,40,-95,3,-98,-54,125, 
  /* [2][0][][] */ -127,-62,34,15,76,5,26,-17, 
  /* [3][0][][] */ 0,-45,-127,-61,37,-57,-50,51, 
  /* [4][0][][] */ -61,-66,117,-26,127,-83,76,0, 
  /* [5][0][][] */ -49,20,64,-104,63,64,-74,127, 
  /* [6][0][][] */ -127,69,62,44,-52,22,23,-88, 
  /* [7][0][][] */ 49,-16,57,25,50,-127,-2,107, 
  /* [8][0][][] */ -2,61,-18,-35,22,103,127,-56, 
  /* [9][0][][] */ 80,127,20,-50,-55,-43,-49,98, 
  /* [10][0][][] */ 43,-3,22,5,-9,26,-127,-89, 
  /* [11][0][][] */ -64,6,-90,-80,127,27,16,43, 
  /* [12][0][][] */ 79,27,-23,-8,127,78,-5,8, 
  /* [13][0][][] */ -127,-122,-24,87,-122,35,84,-5, 
  /* [14][0][][] */ -26,77,-77,89,-45,127,-23,39, 
  /* [15][0][][] */ -4,-57,-60,-65,127,47,-4,69, 
  /* [16][0][][] */ 82,-62,-11,52,31,-29,44,-127, 
  /* [17][0][][] */ -59,-57,-127,116,7,71,75,-112, 
  /* [18][0][][] */ 91,1,116,18,-24,-127,-74,-43, 
  /* [19][0][][] */ -39,127,44,39,106,-114,-92,-41, 
  /* [20][0][][] */ -70,-16,-127,-28,23,3,-21,-27, 
  /* [21][0][][] */ -93,-2,52,92,-71,-106,127,-60, 
  /* [22][0][][] */ 61,0,-127,-98,-48,-9,-23,45, 
  /* [23][0][][] */ -28,18,127,-31,-90,41,-4,-87, 
  /* [24][0][][] */ -88,97,93,68,127,71,-26,-8, 
  /* [25][0][][] */ -50,-127,-61,26,-36,54,37,-18, 
  /* [26][0][][] */ 127,117,-109,-46,-119,-51,-39,60, 
  /* [27][0][][] */ 83,54,-93,36,-127,5,-28,-41, 
  /* [28][0][][] */ -36,49,36,-89,71,127,-107,-109, 
  /* [29][0][][] */ 15,-16,-13,-57,-127,4,1,-65, 
  /* [30][0][][] */ -113,-13,54,127,57,31,-37,-12, 
  /* [31][0][][] */ -9,-127,3,-98,-126,63,-83,-103, 
  /* [32][0][][] */ -127,1,35,-10,13,-25,-4,19, 
  /* [33][0][][] */ 22,-60,-113,-127,-21,17,-23,24, 
  /* [34][0][][] */ 81,127,121,16,-97,-60,71,-83, 
  /* [35][0][][] */ 81,3,6,-3,-71,-14,-127,-43, 
  /* [36][0][][] */ 127,8,76,-56,-3,-35,65,91, 
  /* [37][0][][] */ 121,110,-5,-27,108,89,-127,58, 
  /* [38][0][][] */ -19,121,127,125,-61,14,82,-60, 
  /* [39][0][][] */ 25,15,127,-37,77,-15,-44,17, 
  /* [40][0][][] */ 76,21,15,-16,-52,-127,16,-22, 
  /* [41][0][][] */ 29,-66,28,127,-23,79,9,98, 
  /* [42][0][][] */ -5,-72,38,-47,127,-44,67,15, 
  /* [43][0][][] */ -6,-34,-91,-19,127,76,-68,115, 
  /* [44][0][][] */ 106,-21,127,-8,-3,20,-71,5, 
  /* [45][0][][] */ -52,3,50,-28,-127,-95,-35,106, 
  /* [46][0][][] */ -51,57,60,35,-14,-2,12,-127, 
  /* [47][0][][] */ 33,22,6,59,21,-127,64,67, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0055553107522428036, 0.0025407595094293356, 0.0023778462782502174, 0.0031233674380928278, 0.0038115265779197216, 0.0021340204402804375, 0.0032710907980799675, 0.0023570610210299492, 0.0018344824202358723, 0.0040496215224266052, 0.0027583162300288677, 0.0032368076499551535, 0.0037895070854574442, 0.0021130240056663752, 0.0042793466709554195, 0.0032334635034203529, 0.0025276115629822016, 0.0019878244493156672, 0.0014600608265027404, 0.0025002111215144396, 0.0050859609618782997, 0.0017836072947829962, 0.0038999659009277821, 0.0017747161909937859, 0.0025017419829964638, 0.0022595294285565615, 0.0035437308251857758, 0.001685137627646327, 0.0023970636539161205, 0.0048447242006659508, 0.0044413316063582897, 0.0015047769993543625, 0.0043229106813669205, 0.0019597706850618124, 0.0022094235755503178, 0.00257504777982831, 1.2273796528461389e-05, 0.0015923542669042945, 0.0021868816111236811, 0.0019981458317488432, 0.0030964384786784649, 0.0034031183458864689, 0.0030482106376439333, 0.0029935203492641449, 0.0038959677331149578, 0.003269208362326026, 0.0045151226222515106, 0.0032514235936105251, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5847, -1293, 15942, -11110, -11271, -14551, -7885, -2480, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.7889697169885039e-05, 0.00013980660878587514, 9.7499614639673382e-05, 0.000140798554639332, 9.2860223958268762e-05, 0.00012706697452813387, 0.00019975422765128314, 0.00020445219706743956, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -18,-21,40,-39,59,91,61,83,110,-48,-33,49,-22,-12,17,-21,55,44,8,-50,-32,11,-80,-37,25,-19,16,-73,-26,32,40,32,32,42,63,8,127,-57,-84,4,-66,-71,-40,-6,-60,-102,-119,49, 
  /* [1][0][][] */ -21,8,-44,57,5,19,-43,-14,-59,17,17,82,-21,11,-19,127,46,50,7,-27,-49,-26,-72,18,13,-14,-22,-84,53,-4,-56,-59,57,-29,-28,-52,32,35,47,-50,9,74,47,-42,-1,-40,-57,-33, 
  /* [2][0][][] */ 2,-77,-23,-3,-23,23,-3,3,123,22,4,-28,-31,-91,33,14,11,-56,-14,-4,-107,43,-3,36,-1,34,-51,-29,-15,-30,43,-42,-100,32,-60,58,-62,54,-24,-35,127,-21,-1,43,26,48,-49,-57, 
  /* [3][0][][] */ -20,-100,93,62,14,-100,-24,-4,-112,127,60,-58,48,16,-14,29,53,38,-32,47,70,82,35,-48,3,94,77,33,-35,-58,18,18,-15,-6,43,17,-12,-79,-26,47,-23,-1,29,-65,-73,26,6,30, 
  /* [4][0][][] */ -3,63,-12,78,33,4,10,-12,-60,73,43,75,-2,19,52,9,5,-102,9,-19,99,-17,-95,59,70,-26,31,28,47,24,-19,-63,-50,127,3,6,63,-27,30,24,-35,32,-5,-24,-3,-59,-35,23, 
  /* [5][0][][] */ -21,5,-7,-81,-124,25,126,25,14,61,-36,-16,-105,-11,47,-29,-84,42,-61,-67,-4,91,17,37,105,34,16,14,-22,-15,127,-51,-4,99,69,86,-40,54,88,57,-20,-33,-22,29,-58,39,29,66, 
  /* [6][0][][] */ 1,-22,-18,27,-66,-60,11,8,23,-18,43,14,-44,-16,36,53,0,-69,-2,-58,67,-23,-7,-43,16,0,2,43,50,-2,7,127,41,-10,-3,27,1,-2,25,13,1,46,-30,-46,-6,-32,-25,32, 
  /* [7][0][][] */ -27,-17,-40,-2,0,-22,0,12,35,0,17,4,-3,15,8,-1,26,-11,7,-2,-51,7,8,-38,0,-8,-55,-16,-14,-19,17,28,16,-12,33,11,-18,127,-12,-36,-38,-6,-46,-32,19,55,-72,-10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0037353120278567076, 0.0059417807497084141, 0.0041437335312366486, 0.0059839384630322456, 0.0039465595036745071, 0.0054003465920686722, 0.0084895547479391098, 0.0086892182007431984, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -535, 29873, 28642, -2440, 1748, -11945, 14787, 17540, -8456, 9392, -3055, 13530, 13519, -21799, -10745, -2094, 3979, 25453, -659, -386, 33067, 9304, -9484, -3670, 14653, 13338, -1068, -2362, -4810, 587, 34400, -2493, 2004, 8887, 12874, 12812, -9056, 56933, -6450, 764, 26813, 236, -1782, 15458, 1249, -1205, -3707, 14297, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00022940791677683592, 7.4602816312108189e-05, 0.00011826035188278183, 0.00014704336354043335, 4.286604598746635e-05, 0.00011970153718721122, 0.00014884893607813865, 0.00010441204358357936, 0.00027194982976652682, 4.1065275581786409e-05, 7.426483352901414e-05, 0.00011677596194203943, 0.00011049624299630523, 0.00017880107043311, 8.0185564002022147e-05, 8.9163870143238455e-05, 5.1409926527412608e-05, 0.00013508125266525894, 0.00039416327490471303, 0.00011494170757941902, 7.517859194194898e-05, 0.00012018054258078337, 0.00010136077617062256, 0.00016575750487390906, 7.8160395787563175e-05, 9.5900730229914188e-05, 0.00018020723655354232, 8.9516070147510618e-05, 0.00014425546396523714, 0.00015097214782144874, 8.9201297669205815e-05, 9.2969399702269584e-05, 3.649989957921207e-05, 8.7904896645341069e-05, 0.0001017832473735325, 8.337433246197179e-05, 9.1660076577682048e-05, 5.568180131376721e-05, 9.0104469563812017e-05, 9.0639121481217444e-05, 0.00012067555508110672, 0.00048129752394743264, 6.1321916291490197e-05, 0.00010583258699625731, 0.00012564007192850113, 0.00016286445315927267, 0.00021104159532114863, 0.00010845135693671182, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 58,-88,-53,59,81,31,-50,-67,14,78,96,-44,-21,60,47,57,78,-58,63,101,-50,-18,61,122,-57,-3,59,100,114,98,-36,82,69,-97,-95,3,104,-60,82,17,-127,-8,80,-103,118,96,41,-113, 74,-114,-95,73,89,55,-20,-94,20,70,96,-66,-46,89,108,55,33,-77,31,99,-58,-82,66,85,-86,-58,102,75,112,127,-64,84,76,-102,-127,17,92,-104,99,46,-120,-16,54,-83,127,121,57,-127, 58,-68,-56,17,26,21,-9,-55,-4,47,31,-15,-44,41,26,14,-23,-12,41,0,-6,-100,28,23,35,-14,49,52,27,58,-41,-2,-2,-78,-64,-31,28,-58,26,9,-60,26,36,-46,98,14,32,-117, 
  /* [0][1][][] */ 41,-83,-58,61,97,92,-127,-104,103,127,127,-103,-75,122,127,82,105,-100,44,127,-80,-113,127,127,-127,-75,124,126,104,67,-79,124,127,-97,-69,-127,94,-88,107,32,-107,43,102,-113,71,127,24,-54, 44,-127,-127,127,127,127,-88,-127,127,116,126,-127,-127,127,123,127,127,-127,27,83,-127,-127,101,110,-85,-127,127,127,127,83,-127,127,127,-104,-100,-77,127,-127,127,125,-104,58,127,-127,99,125,34,-105, -7,-80,-74,43,73,49,-61,-42,37,66,12,-63,-32,65,45,64,40,-19,7,29,-35,-117,80,53,-75,0,39,83,42,69,-47,20,54,-127,-100,-67,88,-63,18,45,-37,48,52,-75,38,-19,20,-122, 
  /* [0][2][][] */ -52,-30,-43,43,38,40,2,-51,-109,59,92,-54,-42,82,33,40,76,-19,-91,70,-23,-26,84,75,-54,-91,37,44,56,-2,-74,37,68,-58,-12,-81,82,-27,58,108,-14,127,67,-54,-7,73,-106,-22, -127,-79,-109,70,64,70,-20,-46,-84,68,110,-67,-106,84,36,88,81,-25,-127,58,-36,-25,73,60,-85,-57,17,64,52,60,-91,38,91,-120,-25,-93,78,-56,64,127,3,100,80,-66,45,22,-127,-112, -74,-46,-78,47,34,19,2,-20,-91,9,68,-28,-41,50,17,42,25,-14,-83,21,-15,55,24,30,-55,3,-2,43,15,-1,-42,15,49,-28,-17,-80,46,-20,18,91,15,63,50,0,-18,-8,-60,-60, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0097498362883925438, 0.0031706197187304497, 0.0050260648131370544, 0.0062493425793945789, 0.001821806887164712, 0.0050873151049017906, 0.0063260793685913086, 0.0044375117868185043, 0.011557867750525475, 0.0017452741740271449, 0.0031562552321702242, 0.0049629784189164639, 0.0046960902400314808, 0.0075990455225110054, 0.0034078864846378565, 0.0037894644774496555, 0.0021849218755960464, 0.0057409531436860561, 0.016751939430832863, 0.0048850225284695625, 0.0031950899865478277, 0.0051076728850603104, 0.0043078330345451832, 0.0070446939207613468, 0.0033218166790902615, 0.0040757809765636921, 0.007658807560801506, 0.0038044329266995192, 0.0061308569274842739, 0.0064163161441683769, 0.0037910551764070988, 0.0039511993527412415, 0.0015512456884607673, 0.0037359579000622034, 0.004325788002461195, 0.0035434090532362461, 0.0038955530617386103, 0.002366476459428668, 0.0038294398691505194, 0.0038521625101566315, 0.0051287109963595867, 0.020455144345760345, 0.0026061814278364182, 0.0044978847727179527, 0.005339703056961298, 0.0069217393174767494, 0.0089692678302526474, 0.0046091824769973755, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -2111, 5210, 7037, -1012, 105, 7358, 5598, 2199, 10578, 1438, -1696, 1956, 5465, 2236, -50, 774, -1367, 12964, -1908, -1070, 971, 1411, 243, -995, 80, 3394, -2259, -1151, -781, -2607, 19015, 4786, 1712, 1072, 330, 1489, 2986, 11958, 2151, 114, 7840, -2568, 1238, 1810, -2263, -1982, 20913, 3446, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0002309449773747474, 0.00015601699124090374, 0.00012127197260269895, 0.00023834206513129175, 0.00033637986052781343, 0.00010725350148277357, 0.00015398056712001562, 0.00019907628302462399, 9.9288903584238142e-05, 0.00034310808405280113, 0.00024877471150830388, 0.00025596958585083485, 0.00013632229820359498, 0.0002450869360473007, 0.00038355658762156963, 0.00021882403234485537, 0.00024655152810737491, 7.0254674938041717e-05, 0.0001772231626091525, 0.00027190073160454631, 0.0003353782813064754, 0.00024501708685420454, 0.000236535954172723, 0.00025942712090909481, 0.00027332408353686333, 0.00018119360902346671, 0.00021583602938335389, 0.00018367246957495809, 0.00023342973145190626, 0.00016425579087808728, 6.107792432885617e-05, 0.00016608614532742649, 0.00018229623674415052, 0.00026251343660987914, 0.00024682242656126618, 0.00028433097759261727, 0.0001418461324647069, 7.4146977567579597e-05, 0.00024119803856592625, 0.00028244312852621078, 0.00012514396803453565, 0.00011645765334833413, 0.00022718249238096178, 0.00024209372350014746, 0.00021266871772240847, 0.00020075542852282524, 5.3533294703811407e-05, 0.00014633014507126063, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 20,29,-53,9,-28,45,-127,27, 
  /* [1][0][][] */ 13,-70,-107,11,-10,-22,127,-105, 
  /* [2][0][][] */ -127,-47,-48,-47,-25,52,-117,-13, 
  /* [3][0][][] */ -75,-34,33,-20,-15,-124,-127,-23, 
  /* [4][0][][] */ -36,-127,-36,16,55,15,-39,-47, 
  /* [5][0][][] */ 84,-40,100,41,-127,48,-99,-111, 
  /* [6][0][][] */ 27,-127,-74,-37,-18,71,-66,-72, 
  /* [7][0][][] */ -24,-83,-66,-48,85,-127,1,10, 
  /* [8][0][][] */ 31,45,43,56,25,-40,1,127, 
  /* [9][0][][] */ -13,-52,-43,11,45,-18,127,-10, 
  /* [10][0][][] */ -38,30,-127,23,13,26,86,-112, 
  /* [11][0][][] */ 2,-23,-40,9,-127,27,21,38, 
  /* [12][0][][] */ 89,59,-24,48,-61,127,86,-18, 
  /* [13][0][][] */ -39,0,29,-18,46,-127,3,64, 
  /* [14][0][][] */ -114,-58,-1,18,17,58,-127,-117, 
  /* [15][0][][] */ 47,83,38,4,-127,42,99,-48, 
  /* [16][0][][] */ -24,-56,23,54,-29,-84,-10,-127, 
  /* [17][0][][] */ -84,127,12,-26,-57,-46,-90,-73, 
  /* [18][0][][] */ 85,127,-63,-95,73,97,-61,-81, 
  /* [19][0][][] */ -19,81,-17,18,-127,18,-64,-101, 
  /* [20][0][][] */ -127,-11,13,16,13,21,106,52, 
  /* [21][0][][] */ -25,-1,59,8,-70,-113,-127,3, 
  /* [22][0][][] */ -10,-26,-65,0,-127,16,4,80, 
  /* [23][0][][] */ 67,-13,-4,-15,127,61,-73,66, 
  /* [24][0][][] */ 127,18,-64,32,-97,14,29,-5, 
  /* [25][0][][] */ 5,-48,56,72,-24,-127,8,87, 
  /* [26][0][][] */ 28,127,20,60,105,-21,35,-26, 
  /* [27][0][][] */ -120,127,58,-30,121,-81,-1,75, 
  /* [28][0][][] */ -92,-73,-64,-43,71,-127,13,-8, 
  /* [29][0][][] */ -52,-37,52,29,127,-93,-91,66, 
  /* [30][0][][] */ 127,47,-113,-112,-73,-94,-93,-77, 
  /* [31][0][][] */ 20,2,41,63,-127,11,35,9, 
  /* [32][0][][] */ 127,14,83,62,-58,-74,100,79, 
  /* [33][0][][] */ 127,28,-61,29,-119,-67,40,50, 
  /* [34][0][][] */ 26,-1,-46,27,-46,127,-3,-62, 
  /* [35][0][][] */ 127,18,-4,-24,37,-111,22,115, 
  /* [36][0][][] */ -38,-60,85,-113,-43,-30,74,-127, 
  /* [37][0][][] */ 96,-74,55,42,127,-12,40,-122, 
  /* [38][0][][] */ 62,127,6,-21,-23,20,21,72, 
  /* [39][0][][] */ 12,6,-72,60,-40,-51,-68,127, 
  /* [40][0][][] */ -20,-21,-3,-43,22,-127,20,48, 
  /* [41][0][][] */ -59,49,-127,-81,79,121,57,-103, 
  /* [42][0][][] */ 29,-53,-40,3,93,127,39,43, 
  /* [43][0][][] */ 7,42,-18,31,-127,-87,55,-65, 
  /* [44][0][][] */ -127,-77,-7,-27,79,70,-115,-97, 
  /* [45][0][][] */ -60,66,-66,27,30,0,-56,127, 
  /* [46][0][][] */ -39,69,127,-9,-50,-59,-61,39, 
  /* [47][0][][] */ -107,-105,-36,-42,107,127,-34,72, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0028556874021887779, 0.0019291857024654746, 0.0014995556557551026, 0.002947153989225626, 0.0041594137437641621, 0.0013262140564620495, 0.001904004835523665, 0.0024616236332803965, 0.0012277299538254738, 0.0042426097206771374, 0.003076156135648489, 0.0031651223544031382, 0.0016856563743203878, 0.003030556021258235, 0.0047427648678421974, 0.0027058091945946217, 0.0030486660543829203, 0.00086871511302888393, 0.0021914048120379448, 0.0033621145412325859, 0.0041470290161669254, 0.0030296922195702791, 0.0029248211067169905, 0.0032078756485134363, 0.0033797146752476692, 0.0022405004128813744, 0.0026688617654144764, 0.002271152101457119, 0.0028864119667559862, 0.0020310604013502598, 0.00075524247949942946, 0.0020536931697279215, 0.0022541345097124577, 0.0032460384536534548, 0.0030520155560225248, 0.0035158174578100443, 0.0017539598047733307, 0.00091684435028582811, 0.0029824688099324703, 0.0034924736246466637, 0.0015474336687475443, 0.0014400255167856812, 0.0028091634158045053, 0.0029935440979897976, 0.002629697322845459, 0.0024823867715895176, 0.00066195143153890967, 0.0018094057450070977, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 9705, 15176, 6987, 514, 1802, -15970, 5591, -7434, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00011873091716552153, 0.00010984046821249649, 0.00013725701137445867, 0.00020758062601089478, 0.00012265771511010826, 0.00011577866098377854, 6.9156623794697225e-05, 0.00011216722487006336, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 27,-46,112,71,32,-49,10,12,-2,45,-30,24,-53,-72,34,11,-97,58,-30,66,-57,61,6,-31,0,-48,74,-30,-16,24,-23,116,-54,-7,-26,-91,-51,-52,-31,-5,10,64,-127,11,53,42,16,49, 
  /* [1][0][][] */ -55,-30,49,0,-28,23,-32,-39,58,2,7,-41,-28,26,-4,21,7,8,17,-26,-72,-32,-84,-20,14,-45,-26,-19,22,-77,-19,-127,-8,-69,-69,-65,-49,-87,-27,15,39,-14,76,-107,-63,-13,-17,-6, 
  /* [2][0][][] */ -61,87,-17,36,13,1,31,-39,68,-55,59,79,100,8,16,-53,94,-2,10,36,-27,22,20,125,-127,-59,5,-26,-5,95,-10,-90,-30,-2,8,-73,-27,10,-24,-8,88,-87,18,-12,19,-110,-9,-17, 
  /* [3][0][][] */ 58,-5,-46,49,94,-87,-9,-106,-21,4,-44,-56,-35,127,-26,31,-31,-19,-61,-36,11,70,-4,-33,107,27,63,-57,36,-76,55,-46,55,62,109,-63,-29,21,-18,58,50,77,-59,6,-10,38,11,23, 
  /* [4][0][][] */ -53,15,-68,85,114,-24,45,-51,-58,-8,-76,56,-39,-37,24,-81,23,79,-26,-41,-43,51,-69,-73,2,-3,1,-45,38,-51,-31,76,-23,96,-76,-67,-77,-66,-38,5,84,-55,127,22,11,95,-55,-55, 
  /* [5][0][][] */ 54,1,100,2,3,26,53,29,127,8,75,8,65,49,38,-67,-12,32,45,-47,-65,-66,24,45,23,3,34,40,-33,-35,8,-17,-20,64,-21,58,55,-12,-33,-50,-6,75,47,55,-8,-3,91,0, 
  /* [6][0][][] */ -23,-68,-31,19,37,-22,9,22,-42,-27,109,43,98,89,-39,61,121,-127,-11,7,-7,-56,-100,16,-75,59,-37,-1,-22,-43,83,-55,104,8,-63,-11,-37,11,64,24,84,-77,-8,-88,-124,41,-21,43, 
  /* [7][0][][] */ 4,-13,-66,-29,24,108,-2,-18,8,-55,-127,-103,37,65,-75,-53,-28,18,104,12,-29,-77,50,-10,123,-44,-68,106,-55,-19,-32,-84,-55,72,51,121,99,-67,-23,-33,-5,-9,49,-31,-10,-20,11,-67, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0050460640341043472, 0.0046682199463248253, 0.0058334227651357651, 0.008822176605463028, 0.0052129528485238552, 0.0049205929972231388, 0.0029391564894467592, 0.0047671068459749222, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -67, 3719, 1236, -765, -285, 8861, -937, -4078, -6021, -117, -7905, -130, -1670, -1753, 767, 207, -4240, 15294, -2084, 1623, 2235, -1095, -2031, 2064, 19448, -113, -1379, -485, -1370, -684, -3055, -8889, 2035, 15573, 1126, 6588, -1008, -3797, 2284, -531, -3854, -131, 4612, 7258, 1145, 7091, 295, -988, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00041189917828887701, 7.6245087257120758e-05, 0.0005637371214106679, 0.00017241702880710363, 0.00015347165754064918, 0.00029959497624076903, 0.00041435318416915834, 0.00021098890283610672, 0.00029478833312168717, 0.00014611490769311786, 0.00039481892599724233, 0.00020518027304206043, 0.00016089010750874877, 0.00020542585116345435, 0.0001275816757697612, 0.00054854300105944276, 0.00025603527319617569, 9.1941357823088765e-05, 0.00019951943249907345, 0.00037465727655217052, 0.00029361253837123513, 0.00030100884032435715, 0.00014728702080901712, 0.00061042496236041188, 0.0002000420936383307, 0.00030570829403586686, 0.00022034774883650243, 0.00015224430535454303, 0.00020333772408775985, 0.00015521780005656183, 0.00036416784860193729, 0.00056884664809331298, 0.0004452641005627811, 0.00012632033030968159, 0.00043225963599979877, 0.00021675362950190902, 0.00014659615408163518, 9.6076582849491388e-05, 0.00046970648691058159, 0.00086262286640703678, 0.00021364586427807808, 0.00073179724859073758, 0.00044823737698607147, 0.00021124811610206962, 0.00019023774075321853, 0.00016693428915459663, 0.00023483402037527412, 0.00036335852928459644, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -10,-58,34,-8,127,-6,-7,-19,-24,39,0,17,73,-7,127,-42,-30,-22,-42,-26,-66,-19,-58,17,-127,36,32,-47,-10,18,3,-5,-30,-2,24,-6,78,63,15,-3,113,9,-13,-13,-108,-9,-43,-50, 4,-115,-77,-19,-37,-13,35,16,20,-15,86,127,-11,19,-80,127,-18,-55,15,-62,-94,-127,-69,68,-115,-79,24,118,14,31,117,4,-127,-105,-43,30,127,-77,104,11,97,-17,-22,-28,-61,-26,74,-3, 7,-30,-11,127,54,3,-57,-2,-28,-48,-19,-23,38,-19,-87,-44,2,60,-15,-19,-7,3,-30,7,-56,-64,-15,9,2,25,-93,1,-2,44,23,18,6,58,-127,6,53,-10,-9,17,-127,0,-58,41, 
  /* [0][1][][] */ -108,-88,127,9,-25,-37,80,21,22,88,5,30,33,14,123,26,-2,-127,69,34,70,-3,53,-44,-27,-21,48,-51,31,58,70,64,40,-127,-6,127,12,59,-55,-111,54,99,-21,-76,25,-64,-73,16, 127,-88,-73,-59,8,-127,127,127,127,6,127,-34,-127,-11,-38,-44,127,-117,102,127,127,85,127,-127,17,-19,103,0,127,127,-127,127,25,-57,127,-108,-60,127,-97,117,-127,-127,127,-127,92,-127,127,-120, -13,-127,22,76,-8,3,-25,11,-17,-127,-47,62,53,-7,-62,43,6,4,-24,10,-8,-17,38,-29,-8,13,-127,54,-41,8,81,28,-21,-79,-24,-47,64,14,111,17,49,58,-47,5,55,-19,-50,127, 
  /* [0][2][][] */ -8,102,24,-19,60,4,-34,-5,-31,12,1,-3,38,24,107,5,-54,-1,-20,-53,-29,18,-4,9,-29,-24,46,-6,-34,-105,23,-4,-15,2,-32,33,-56,36,2,96,-5,19,-5,7,30,9,-42,-41, -11,74,-53,15,3,-24,9,46,27,2,28,-39,9,127,-78,-80,-27,-69,127,-84,-76,80,-2,51,77,127,-9,127,-46,-103,-5,-11,73,-118,-98,4,-64,-47,-30,-127,43,-26,-59,68,61,24,12,6, 2,114,-12,25,26,21,-37,0,-29,-20,-6,-11,26,-2,-83,-7,-37,-16,-40,-30,-28,16,-4,-4,-54,34,-52,3,59,-77,23,3,-3,19,-9,-17,-44,31,5,4,-54,-6,0,-18,21,10,9,25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.017505714669823647, 0.0032404160592705011, 0.023958828300237656, 0.007327723316848278, 0.0065225451253354549, 0.012732786126434803, 0.017610009759664536, 0.0089670279994606972, 0.012528504244983196, 0.0062098833732306957, 0.016779804602265358, 0.0087201613932847977, 0.0068378294818103313, 0.0087305987253785133, 0.0054222210310399532, 0.023313077166676521, 0.010881498456001282, 0.0039075077511370182, 0.0084795756265521049, 0.01592293381690979, 0.012478533200919628, 0.012792875058948994, 0.0062596984207630157, 0.025943061336874962, 0.0085017886012792587, 0.012992602773010731, 0.009364779107272625, 0.0064703831449151039, 0.0086418529972434044, 0.0065967561677098274, 0.015477132983505726, 0.024175981059670448, 0.018923724070191383, 0.0053686141036450863, 0.018371034413576126, 0.0092120291665196419, 0.0062303366139531136, 0.0040832548402249813, 0.019962524995207787, 0.036661472171545029, 0.0090799489989876747, 0.031101381406188011, 0.019050087779760361, 0.0089780446141958237, 0.0080851037055253983, 0.0070947068743407726, 0.0099804457277059555, 0.015442737378180027, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 11242, 3242, 25821, -3325, -1863, 7401, -1820, 1260, 2743, -149, 6535, 1325, 2549, 2644, 2505, 4693, 4266, 3323, -1152, 6746, 2175, 347, 1382, 14531, 38784, 4006, 4347, -1179, -342, 5691, 6048, 15994, 12131, 9502, 11830, -2021, 417, 2837, 14161, 9617, 1016, 18581, 17616, 6961, 7489, 1917, 6020, 1292, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.5125269833952188e-05, 0.00017696083523333073, 4.7570465540047735e-05, 0.00017696639406494796, 0.00019933456496801227, 0.00014679638843517751, 0.00015028526831883937, 0.00044327307841740549, 0.00023715100542176515, 0.0001978633226826787, 0.0001363893534289673, 0.00018808581808116287, 0.00020267631043680012, 0.00025468581588938832, 0.00022791959054302424, 0.00014833180466666818, 0.0001476250181440264, 0.00017455201304983348, 0.00026852375594899058, 0.00012365070870146155, 0.00022470130352303386, 0.00024048387422226369, 0.00018590917170513421, 7.0331865572370589e-05, 4.054926466778852e-05, 0.00021215240121819079, 0.0001891042193165049, 0.0002818609937094152, 0.00034471502294763923, 0.00013414827117230743, 0.000140327014378272, 6.530316750286147e-05, 8.1278281868435442e-05, 9.9783639598172158e-05, 8.3061269833706319e-05, 0.00014454957272391766, 0.00023845328541938215, 0.00014400377403944731, 6.4614629081916064e-05, 8.5651976405642927e-05, 0.000201957649551332, 5.4143471061252058e-05, 6.2716237152926624e-05, 0.00012706205598078668, 0.00011896072828676552, 0.0003653523453976959, 0.00013906985986977816, 0.00020917077199555933, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -1,-6,11,-104,-92,9,39,127, 
  /* [1][0][][] */ 103,12,-16,-4,-95,35,127,2, 
  /* [2][0][][] */ -23,127,-24,-33,-38,111,-39,-116, 
  /* [3][0][][] */ 72,-58,-80,124,-127,-47,-6,-15, 
  /* [4][0][][] */ 56,-75,24,-33,-127,-1,58,39, 
  /* [5][0][][] */ -11,40,-9,-77,-127,-5,-28,17, 
  /* [6][0][][] */ 50,-8,36,36,120,-35,-11,-127, 
  /* [7][0][][] */ 8,30,17,127,26,1,-9,16, 
  /* [8][0][][] */ 15,30,11,-48,36,127,4,-28, 
  /* [9][0][][] */ 100,43,-11,10,-66,-31,127,81, 
  /* [10][0][][] */ 1,66,-68,-42,21,127,67,-70, 
  /* [11][0][][] */ -26,-53,-127,97,-58,39,-25,89, 
  /* [12][0][][] */ -107,-82,55,61,36,-127,-45,4, 
  /* [13][0][][] */ 46,34,41,57,-67,127,21,-37, 
  /* [14][0][][] */ 11,-120,-7,-2,-62,-81,-127,127, 
  /* [15][0][][] */ -68,39,6,11,104,-12,-127,-56, 
  /* [16][0][][] */ 75,76,-105,-127,63,112,89,35, 
  /* [17][0][][] */ -109,127,-109,22,-1,-18,12,-118, 
  /* [18][0][][] */ 37,-3,-97,127,-3,-33,-37,-70, 
  /* [19][0][][] */ 126,21,18,34,-50,3,127,38, 
  /* [20][0][][] */ 24,-57,-81,127,52,-17,-28,-49, 
  /* [21][0][][] */ 22,57,127,-118,40,-17,14,-88, 
  /* [22][0][][] */ -77,-15,-127,46,-21,32,5,113, 
  /* [23][0][][] */ 115,12,54,24,-127,119,49,-64, 
  /* [24][0][][] */ -31,-11,-127,66,-17,31,18,66, 
  /* [25][0][][] */ 40,-30,-52,127,32,3,-23,-5, 
  /* [26][0][][] */ -101,16,127,-88,-14,12,57,0, 
  /* [27][0][][] */ -81,88,127,7,28,-9,85,15, 
  /* [28][0][][] */ -51,-115,42,-127,-20,12,-22,-14, 
  /* [29][0][][] */ -81,-124,8,125,-5,-127,-23,85, 
  /* [30][0][][] */ -127,68,126,-17,37,17,80,14, 
  /* [31][0][][] */ -66,43,85,-127,-47,19,31,71, 
  /* [32][0][][] */ -60,107,79,-127,18,27,-2,108, 
  /* [33][0][][] */ 7,96,-23,51,32,4,-127,-44, 
  /* [34][0][][] */ 94,18,108,-127,-59,-91,40,-65, 
  /* [35][0][][] */ 68,0,31,107,66,-63,34,-127, 
  /* [36][0][][] */ 13,56,127,-103,16,-24,43,-106, 
  /* [37][0][][] */ -72,-66,125,84,6,-127,88,-5, 
  /* [38][0][][] */ 106,-41,67,80,-18,-79,127,13, 
  /* [39][0][][] */ 70,-120,-34,36,-127,5,78,64, 
  /* [40][0][][] */ -27,1,-127,87,-50,40,-61,91, 
  /* [41][0][][] */ -127,-5,-60,-13,118,15,-113,34, 
  /* [42][0][][] */ -92,65,-34,-30,127,49,-111,-34, 
  /* [43][0][][] */ 127,123,-1,99,-6,-113,50,56, 
  /* [44][0][][] */ -5,14,74,-8,33,-127,3,-23, 
  /* [45][0][][] */ -10,-63,127,66,-19,-24,-113,2, 
  /* [46][0][][] */ 25,-127,-127,39,-69,18,-1,9, 
  /* [47][0][][] */ -62,-19,34,-7,73,33,-127,-34, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0017508837627246976, 0.0036397869698703289, 0.00097844458650797606, 0.003639901289716363, 0.0040999772027134895, 0.0030193550046533346, 0.0030911155045032501, 0.0091173825785517693, 0.004877797793596983, 0.0040697162039577961, 0.002805299824103713, 0.0038686092011630535, 0.0041687111370265484, 0.0052384594455361366, 0.0046879230067133904, 0.0030509359203279018, 0.0030363986734300852, 0.0035902415402233601, 0.0055230823345482349, 0.0025432873517274857, 0.0046217283234000206, 0.0049463491886854172, 0.0038238393608480692, 0.0014466083375737071, 0.00083403027383610606, 0.0043636183254420757, 0.0038895560428500175, 0.0057974071241915226, 0.0070902085863053799, 0.0027592044789344072, 0.0028862908948212862, 0.0013431764673441648, 0.0016717576654627919, 0.0020523818675428629, 0.0017084308201447129, 0.00297314184717834, 0.0049045835621654987, 0.002961915684863925, 0.0013290144270285964, 0.0017617172561585903, 0.0041539296507835388, 0.0011136402608826756, 0.001289967680349946, 0.0026134529616683722, 0.0024468223564326763, 0.0075146839953958988, 0.0028604334220290184, 0.0043022911995649338, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -15828, 3103, -21083, 1246, 3159, -142, 8421, 208, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001354370906483382, 0.00012863917800132185, 9.4179209554567933e-05, 9.7365358669776469e-05, 0.00017469444719608873, 0.00012846730533055961, 0.00010012031270889565, 0.00010940978245344013, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 57,108,-43,80,2,-13,-24,4,67,-64,9,-28,0,15,-45,-53,3,-24,41,9,-66,-30,-32,13,18,15,27,-1,9,11,-17,37,-58,13,123,-127,-24,26,-12,111,-22,17,20,3,-14,48,32,-35, 
  /* [1][0][][] */ 2,-49,35,54,-13,-15,-9,-28,42,-46,91,42,15,9,-50,-77,127,56,10,2,-73,38,33,-19,-51,-105,-35,-50,-7,-73,44,-46,-4,-25,-27,11,6,-27,78,-45,-16,38,-48,34,77,55,23,36, 
  /* [2][0][][] */ 91,-31,-13,-8,116,111,67,68,-23,-5,8,-32,-10,58,64,29,-25,-23,57,-67,-26,-37,-45,66,-81,-96,127,15,58,-65,-51,28,-113,81,114,29,-7,1,3,23,20,65,29,-57,-21,17,61,-36, 
  /* [3][0][][] */ 77,-36,20,-13,113,124,31,36,-35,-27,32,52,-127,44,59,24,9,-1,72,-106,-86,19,28,97,13,-39,49,30,43,-70,-1,-18,-116,58,-56,-110,20,-37,69,-52,65,-85,-93,-40,-61,52,-5,63, 
  /* [4][0][][] */ 30,42,-27,-41,-16,-4,-11,-16,0,-10,-6,-14,-23,-18,64,46,-38,-6,-31,39,30,-6,-14,3,-50,-38,-3,49,-14,6,-18,24,-32,-22,25,-127,-8,21,4,57,0,-13,-13,-19,40,2,80,-22, 
  /* [5][0][][] */ 63,62,-90,44,-2,-1,-11,38,-83,-58,-60,-19,37,16,41,21,34,-55,42,127,-73,-46,-60,40,33,-21,-52,76,45,32,-59,-3,-7,7,-64,0,0,16,-23,68,12,79,-14,-33,121,25,14,-64, 
  /* [6][0][][] */ -23,-80,11,-44,-34,-39,-89,-69,-26,-52,-116,40,-57,-57,85,78,-127,13,31,-19,7,55,73,12,-10,-2,-63,87,-77,-37,50,78,23,-48,88,42,29,44,-10,-88,-11,-57,-24,25,-41,-18,-13,68, 
  /* [7][0][][] */ 84,19,-17,49,12,15,6,2,88,-12,-16,-16,64,8,-19,-30,-59,-13,-22,2,1,-16,-23,-21,77,-127,18,4,-3,118,-17,31,-80,22,-62,-41,-8,28,41,28,28,65,-41,-12,-46,40,38,-22, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0057560759596526623, 0.0054671652615070343, 0.0040026162751019001, 0.0041380277834832668, 0.0074245138093829155, 0.0054598604328930378, 0.0042551131919026375, 0.0046499157324433327, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { -688, 6253, 1273, -2394, -1031, 286, 8024, 7507, 1816, -8033, -1452, 734, 6033, 3900, 19260, 16053, -1897, -3456, 5293, 6946, 16572, -2677, 866, -167, 6716, 2119, 948, 16182, 8614, 16203, -175, 2870, 1773, -6300, -1742, 3568, 2654, 503, 470, 3678, 3230, 4662, -8422, 1975, -1719, 19, 9650, -47, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010735623800428584, 0.00013974560715723783, 0.00046827865298837423, 9.5565454103052616e-05, 0.00060088292229920626, 0.00053481844952329993, 0.00011317305325064808, 0.00012070593948010355, 4.3660304072545841e-05, 0.00023508525919169188, 0.00049924885388463736, 0.00036144739715382457, 0.00027862802380695939, 0.00016795120609458536, 6.3782776123844087e-05, 5.338048140401952e-05, 0.00012211145076435059, 0.00048419440281577408, 6.7238710471428931e-05, 0.00010937776096398011, 5.9925969253527001e-05, 0.00093913363525643945, 0.0011653655674308538, 0.00030816701473668218, 4.4506312406156212e-05, 0.00017385352111887187, 0.00010554292384767905, 0.00017354609735775739, 0.00012971738760825247, 0.00014921135152690113, 0.00062455021543428302, 0.00027180224424228072, 0.00010376059799455106, 0.00026869488647207618, 8.1349564425181597e-05, 7.7873752161394805e-05, 0.00040577686741016805, 0.00060904643032699823, 9.508118819212541e-05, 0.00017106372979469597, 8.7520151282660663e-05, 0.00022320274729281664, 0.00010403910710010678, 0.0004118336655665189, 7.5313168053980917e-05, 0.00027481719735078514, 7.4766736361198127e-05, 0.00076953181996941566, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -18,-92,-109,79,-81,3,-101,-92,83,86,68,-25,24,4,-51,-58,87,-74,38,-26,3,-92,-33,-81,112,108,-9,-117,0,-93,59,92,52,46,70,22,88,63,54,7,-124,8,59,36,-41,-26,-12,-91, 95,-2,33,71,-123,42,-68,12,127,100,78,64,-16,-98,-98,-97,110,-33,86,-69,-113,127,127,21,126,127,47,-77,-90,-75,-120,112,99,127,103,93,-31,74,74,-66,-73,-91,54,-54,-57,12,-58,105, 103,4,54,58,-78,9,-19,-20,63,76,4,-21,-87,-3,-36,-66,25,79,34,-3,-50,-13,-76,75,20,51,38,-24,-22,-63,35,75,42,110,27,60,-13,10,47,-2,-58,-17,7,6,-20,58,-9,-3, 
  /* [0][1][][] */ 50,-127,104,106,96,-72,-127,-127,119,67,119,-49,20,-2,-127,-68,100,127,46,-100,-28,116,19,-127,127,115,109,-124,-16,-114,-88,127,102,-12,99,55,34,127,69,-9,-4,-16,100,81,-110,13,-110,108, 127,-2,-8,127,127,-127,-127,-3,126,127,127,44,-43,-127,-108,-127,127,64,127,-127,-127,-113,-117,48,114,120,127,-127,-127,-63,127,115,127,18,127,127,-17,83,127,-127,12,-127,123,-83,-127,89,-127,-127, 101,-1,-127,56,87,-61,-34,-18,15,84,13,-23,-127,2,-49,-33,41,-80,44,-53,-75,18,74,88,55,76,-3,-29,-33,-90,-38,55,36,15,48,63,-10,18,58,-5,-25,-26,31,-22,-71,23,-63,7, 
  /* [0][2][][] */ 60,-77,19,39,6,70,-51,-98,49,69,43,48,21,11,-72,-52,37,-30,28,-49,-39,7,4,-92,46,32,84,-18,3,-127,24,21,60,-76,62,23,-127,60,24,-8,39,-4,112,-127,-72,43,-84,-9, 48,7,20,33,15,96,-36,-11,35,93,31,-127,-1,-92,-52,-37,56,-4,40,-89,-40,0,-33,18,45,61,107,-38,-96,-105,-17,26,68,-67,58,29,7,10,64,-60,127,-62,127,100,-106,127,-118,16, -43,-9,-8,32,-19,38,-15,-20,15,86,-16,37,-58,16,-32,3,22,31,28,-7,-46,32,13,55,9,62,37,16,-31,-51,25,-15,9,-31,13,14,1,-14,68,-5,64,-1,17,-17,-26,30,9,-4, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045626400969922543, 0.0059391884133219719, 0.019901841878890991, 0.0040615317411720753, 0.025537522509694099, 0.022729784250259399, 0.0048098545521497726, 0.0051300022751092911, 0.0018555629067122936, 0.009991123341023922, 0.021218076348304749, 0.015361513942480087, 0.011841691099107265, 0.0071379262953996658, 0.0027107680216431618, 0.0022686703596264124, 0.0051897368393838406, 0.020578261464834213, 0.0028576450422406197, 0.0046485546045005322, 0.002546853618696332, 0.039913177490234375, 0.049528036266565323, 0.013097098097205162, 0.0018915182445198298, 0.0073887743055820465, 0.004485574085265398, 0.0073757092468440533, 0.0055129891261458397, 0.0063414820469915867, 0.026543382555246353, 0.011551595292985439, 0.0044098254293203354, 0.01141953282058239, 0.0034573564771562815, 0.0033096345141530037, 0.017245516180992126, 0.025884473696351051, 0.0040409504435956478, 0.0072702085599303246, 0.0037196062039583921, 0.0094861164689064026, 0.0044216620735824108, 0.017502930015325546, 0.0032008097041398287, 0.011679730378091335, 0.0031775862444192171, 0.032705102115869522, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 11216, 4776, 11624, 2958, 4068, 4450, -4380, 4071, 2717, -2698, -1944, 2789, -2265, -4581, 8152, 1743, -1738, 2442, -898, 2842, 1458, 3731, -1051, -1386, -1244, -5196, 2856, -3274, 3974, 7446, 1229, 401, 7293, 10631, 8703, 4845, 5213, -4382, 1322, 4687, -121, -3751, 4245, 1082, 330, -6240, -11848, 1190, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042352874879725277, 0.00064049090724438429, 9.9543882242869586e-05, 0.00098829541821032763, 0.00045036280062049627, 0.00035582156851887703, 0.0020322634372860193, 0.0014904136769473553, 0.001512463903054595, 0.0005637704161927104, 0.00014544153236784041, 0.0004256168904248625, 0.00046078715240582824, 0.0012303653638809919, 0.00053368863882496953, 0.0025636367499828339, 0.0013139040675014257, 0.00032182512222789228, 0.0011901118559762836, 0.0018388982862234116, 0.00073614099528640509, 0.00043076046858914196, 0.00019140391668770462, 0.00047347854706458747, 0.00076468690531328321, 0.00079394056228920817, 0.00093371229013428092, 0.00044878094922751188, 0.0011757018510252237, 0.00059688882902264595, 0.00026446059928275645, 0.00055079947924241424, 0.00073708227137103677, 0.00025258568348363042, 0.00046287660370580852, 0.00039411653415299952, 0.00042513426160439849, 0.0016052580904215574, 0.00050545908743515611, 0.00067005201708525419, 0.001126366900280118, 0.00074403692269697785, 0.00086141983047127724, 0.00021253529121167958, 0.0015563435154035687, 0.00074814289109781384, 0.00079425674630329013, 0.00040702955448068678, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -105,-113,26,-127,-61,2,-4,0, 
  /* [1][0][][] */ -127,-9,102,1,-55,17,4,9, 
  /* [2][0][][] */ 3,-13,19,127,17,-17,-21,4, 
  /* [3][0][][] */ -114,-74,-21,-26,46,127,-47,-47, 
  /* [4][0][][] */ -7,-32,-8,-5,-7,13,-127,-73, 
  /* [5][0][][] */ 0,-31,-8,1,-6,9,-127,-72, 
  /* [6][0][][] */ 127,8,15,-5,-60,16,5,-9, 
  /* [7][0][][] */ -127,-22,-7,9,67,4,4,7, 
  /* [8][0][][] */ 18,53,-13,-20,-31,-127,54,12, 
  /* [9][0][][] */ 71,32,-20,-13,-25,1,-3,127, 
  /* [10][0][][] */ 118,-14,-121,-6,-84,-11,38,127, 
  /* [11][0][][] */ -101,127,11,-20,99,-52,26,4, 
  /* [12][0][][] */ 127,-47,-111,1,54,-12,-11,-17, 
  /* [13][0][][] */ 127,14,4,-19,-32,24,7,-6, 
  /* [14][0][][] */ -115,-89,86,-33,78,-12,-43,-127, 
  /* [15][0][][] */ 35,65,-1,-11,-5,-127,-14,8, 
  /* [16][0][][] */ -9,-67,11,0,11,127,10,7, 
  /* [17][0][][] */ 29,-127,-55,9,-38,106,-63,-11, 
  /* [18][0][][] */ 42,-27,-17,-23,-19,17,127,-16, 
  /* [19][0][][] */ -6,25,-3,-127,-12,39,-2,-8, 
  /* [20][0][][] */ -73,-45,69,-5,56,90,-3,-127, 
  /* [21][0][][] */ -18,-9,28,-18,-19,22,-127,-78, 
  /* [22][0][][] */ 62,-7,12,127,-14,-19,54,35, 
  /* [23][0][][] */ 127,-35,-120,-15,26,-39,3,11, 
  /* [24][0][][] */ -35,29,36,44,17,8,-127,-107, 
  /* [25][0][][] */ 127,15,-87,11,14,-6,7,25, 
  /* [26][0][][] */ 6,43,-37,-127,-21,15,-2,1, 
  /* [27][0][][] */ 127,9,-91,-9,-88,38,11,74, 
  /* [28][0][][] */ -127,-17,-22,12,46,7,3,29, 
  /* [29][0][][] */ -7,-127,-26,-123,-11,33,-26,-13, 
  /* [30][0][][] */ -15,80,127,40,18,-82,103,39, 
  /* [31][0][][] */ -66,-5,-127,35,15,-18,92,93, 
  /* [32][0][][] */ -8,-115,4,-127,-13,4,-3,-20, 
  /* [33][0][][] */ 2,-127,-14,-109,-5,28,-11,-6, 
  /* [34][0][][] */ -30,-53,20,-108,40,-62,127,86, 
  /* [35][0][][] */ -127,14,50,7,-121,-28,26,104, 
  /* [36][0][][] */ -118,9,127,24,-62,25,-62,74, 
  /* [37][0][][] */ 127,7,-7,-10,-67,20,6,11, 
  /* [38][0][][] */ -92,-5,102,45,58,-54,56,127, 
  /* [39][0][][] */ -127,-2,79,0,-81,8,-14,9, 
  /* [40][0][][] */ 0,2,58,-5,29,-16,127,34, 
  /* [41][0][][] */ 127,-12,-71,-13,54,5,6,-8, 
  /* [42][0][][] */ -11,-127,28,-12,15,5,-13,-11, 
  /* [43][0][][] */ -1,127,127,7,49,-75,64,16, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-26,38,-13,-56,102,12,-7, 
  /* [46][0][][] */ 21,127,-17,109,8,120,26,33, 
  /* [47][0][][] */ -14,56,5,-20,30,-21,127,68, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0052233929745852947, 0.007899194024503231, 0.0012276776833459735, 0.012188676744699478, 0.0055543379858136177, 0.0043883579783141613, 0.02506396546959877, 0.018381316214799881, 0.018653262406587601, 0.006952997762709856, 0.0017937348457053304, 0.0052491459064185619, 0.0056829019449651241, 0.015174132771790028, 0.0065819984301924706, 0.031617410480976105, 0.016204418614506721, 0.0039690788835287094, 0.014677684754133224, 0.02267918735742569, 0.0090788491070270538, 0.0053125820122659206, 0.0023605902679264545, 0.0058394251391291618, 0.0094309067353606224, 0.0097916927188634872, 0.011515501886606216, 0.00553482910618186, 0.014499966986477375, 0.0073614479042589664, 0.0032616006210446358, 0.0067930268123745918, 0.0090904580429196358, 0.0031151468865573406, 0.0057086711749434471, 0.0048606512136757374, 0.0052431938238441944, 0.019797695800662041, 0.0062338421121239662, 0.0082637714222073555, 0.013891516253352165, 0.0091762300580739975, 0.010623916983604431, 0.0026212041266262531, 0.019194431602954865, 0.0092268688604235649, 0.0097955921664834023, 0.0050199078395962715, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4337, -4977, -549, 3006, 2553, 599, -2752, 1861, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 8.011808677110821e-05, 0.0001716643018880859, 9.8555261502042413e-05, 8.3863393228966743e-05, 0.0001169000388472341, 0.00015499720757361501, 0.00010628464951878414, 0.00018907873891294003, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -17,-4,-50,-35,-22,33,-127,-7, 
  /* [1][0][][] */ 27,88,7,127,8,-7,-1,-29, 
  /* [2][0][][] */ 127,-7,-31,-57,-62,54,107,-42, 
  /* [3][0][][] */ 18,-127,25,-83,23,-71,31,52, 
  /* [4][0][][] */ 127,-6,-59,4,35,-8,-126,-51, 
  /* [5][0][][] */ 2,-31,-1,36,2,-127,-5,6, 
  /* [6][0][][] */ 127,-21,112,8,102,-28,-3,16, 
  /* [7][0][][] */ -127,-1,-96,4,-105,5,34,5, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0034050187095999718, 0.0072957328520715237, 0.0041885985992848873, 0.0035641940776258707, 0.0049682515673339367, 0.006587381474673748, 0.0045170974917709827, 0.0080358460545539856, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -9889, 10562, 681, -10621, 29, -15496, 360, 129, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00035680975997820497, 0.00035859781200997531, 0.00021298311185091734, 0.00037606284604407847, 0.0006259846268221736, 0.00027516318368725479, 0.0014045910211279988, 0.002731026615947485, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,-1,21,12,6,7,9,25, 9,4,-34,127,-32,-1,-5,24, -5,1,-11,22,1,9,-6,15, 
  /* [0][1][][] */ -5,-9,127,-29,127,2,-112,33, 127,-127,-96,1,-93,127,-15,-127, -30,7,12,-18,2,7,127,30, 
  /* [0][2][][] */ -1,1,12,0,9,1,15,26, 2,5,-34,-5,-18,3,-11,-105, -8,2,-14,1,-4,0,-7,30, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.015164414420723915, 0.01524040661752224, 0.0090517820790410042, 0.015982670709490776, 0.026604346930980682, 0.011694435030221939, 0.059695117175579071, 0.11606863141059875, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 6653, 6997, -541, 36947, 3588, 10603, 68814, 8010, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00036818583612330258, 0.00034848734503611922, 0.00011856651690322906, 6.9174864620435983e-05, 0.00017299220780842006, 0.00023348892864305526, 1.946773954841774e-05, 2.1521655071410351e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 51, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -41, 47, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -69, -80, -44, 
  /* [1][2][][] */ 7, -42, 5, 
  /* [2][0][][] */ 32, 28, -46, 
  /* [2][1][][] */ 53, 70, -127, 
  /* [2][2][][] */ 20, 32, -59, 
  /* [3][0][][] */ 41, 52, 20, 
  /* [3][1][][] */ 52, 73, 26, 
  /* [3][2][][] */ -81, -127, -57, 
  /* [4][0][][] */ 5, -52, 48, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 4, -37, 31, 
  /* [5][0][][] */ 1, -57, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -13, -84, 7, 
  /* [6][1][][] */ -22, -127, 1, 
  /* [6][2][][] */ -7, -36, 13, 
  /* [7][0][][] */ 37, -127, 28, 
  /* [7][1][][] */ -25, -7, -14, 
  /* [7][2][][] */ -26, 72, -12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.11621982604265213, 0.11000189185142517, 0.037426155060529709, 0.021835414692759514, 0.054605916142463684, 0.073702029883861542, 0.00614509591832757, 0.0067934254184365273, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.069628007709980011, } };
const TfArray<1, int> quant46_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.08108307421207428, } };
const TfArray<1, int> quant47_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.048618458211421967, } };
const TfArray<1, int> quant51_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.07502330094575882, } };
const TfArray<1, int> quant54_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.080871939659118652, } };
const TfArray<1, int> quant55_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.066279128193855286, } };
const TfArray<1, int> quant59_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.021892193704843521, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.037717975676059723, } };
const TfArray<1, int> quant62_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.07399383932352066, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.058981772512197495, } };
const TfArray<1, int> quant66_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.10270460695028305, } };
const TfArray<1, int> quant67_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.048621471971273422, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.11588981747627258, } };
const TfArray<1, int> quant70_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4320, (TfLiteIntArray*)&tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2016, (TfLiteIntArray*)&tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension70, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_35_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_35_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_35_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
